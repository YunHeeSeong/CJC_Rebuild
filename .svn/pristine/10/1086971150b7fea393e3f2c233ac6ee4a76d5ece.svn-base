@page "/RoleManagment"
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using DataAccessLibrary.Data;
@using DataAccessLibrary.Model;

@inject IRoleData _db
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 기준정보관리 >
    <strong>권한등록</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
            <div>
                <div class="info_title">
                    <h1 class="sub_title">권한 등록</h1>
                    <div class="post_btn">
                        <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>
                    </div>

                </div>
                <RadzenTabs   RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="권한리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@roleList" TItem="RoleModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 권한이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="RoleModel" Property="RoleId" Title="권한코드" Width="70px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="RoleModel" Property="RoleNm" Title="권한명" Width="100px" />
                                    <RadzenDataGridColumn TItem="RoleModel" Property="UseYN" Title="사용여부" Width="70px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="RoleModel" Property="RoleDesc" Title="권한설명"Width="700px" />
                                    <RadzenDataGridColumn TItem="RoleModel" Filterable="false" Title="수정 및 삭제" Width="230px" CssClass="data_center">
                                        <Template Context="role">
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkblue; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" Click="()=>btnUpdateClick(role)">수정</RadzenButton>
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkred; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" Click="()=>btnDeleteClick(role)">삭제</RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>

                <GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />

            </div>
        }
        else
        {
            <p>권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public RoleModel selectedRole { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 7;

    ClaimsPrincipal CurrentUser;

    private List<RoleModel> roleList;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _db.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    roleList = await _db.GetRoleMasterList(CurrentUser.Identity.Name);
                }
            }
        }

    }

    private async Task GetAllDatas()
    {
        roleList = await _db.GetRoleMasterList(CurrentUser.Identity.Name);
    }

    async Task btnNewClick()
    {
        var parameters = new ModalParameters();
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var roleEdit = Modal.Show<RoleEdit>("권한 등록", parameters);
        var result = await roleEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }

    async Task btnUpdateClick(RoleModel role)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(RoleEdit.selectedRole), role);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var roleEdit = Modal.Show<RoleEdit>("권한등록 및 수정", parameters);
        var result = await roleEdit.Result;

        if (!result.Cancelled)
        {
            //show
            await GetAllDatas();
        }
    }


    void btnDeleteClick(RoleModel role)
    {
        DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

        selectedRole = role;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteMasterData(CurrentUser.Identity.Name,selectedRole.RoleId);
            await GetAllDatas();
        }
        else
        {
            selectedRole = null;
        }
    }
}