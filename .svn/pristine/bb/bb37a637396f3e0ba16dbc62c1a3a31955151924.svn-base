@page "/ReadPDItem"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic
@using System.Security.Claims
@using GMINWEB_CJC.Pages.Dialog 

@inject IItemData _db
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    <RadzenLabel Text=" > 품목관리 > " />
    <strong>제품조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">제품 조회</h1>
                @*<div class="post_btn">
                <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>
            </div>*@

            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="제품리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ItemModels" TItem="ItemModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ItemModel" Property="BizUnitNm" Title="매장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="FactBizUnitNm" Title="공장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="ItemCd" Title="품목코드" Width="150px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="ItemNm" Title="품목명" Width="200px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="MadeTypeNm" Title="제작방식" Width="120px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item1ClsNm" Title="대분류" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item2ClsNm" Title="중분류" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item3ClsNm" Title="소분류" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Unit" Title="단위" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Price" Title="금액" Width="120px" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="ItemModel" Filterable="false" Title="이미지 조회" Width="170px" CssClass="data_center">
                                        <Template Context="pdItem">
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkorange; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" Click="()=>btnImageUpload(pdItem)">이미지 조회</RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    @*<RadzenDataGridColumn TItem="ItemModel" Filterable="false" Title="수정 및 삭제" Width="230px">
            <Template Context="pdItem">
                <RadzenButton Style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Light" Click="()=>btnUpdateClick(pdItem)">수정</RadzenButton>
                <RadzenButton Style="margin: 0 1rem 1rem 0; background-color: #375E99;" Click="()=>btnDeleteClick(pdItem)">삭제</RadzenButton>
            </Template>
        </RadzenDataGridColumn>*@
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>


            <GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />


        </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public ItemModel selectedPDItem { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 37;

    ClaimsPrincipal CurrentUser;
    private List<ItemModel> ItemModels;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    ItemModels = await _db.GetAllPDItem(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        ItemModels = await _db.GetAllPDItem(CurrentUser.Identity.Name);
    }

    void btnNewClick()
    {
        navigationManager.NavigateTo("/pdItemEdit" + "/" + CurrentUser.Identity.Name);
    }

    async Task btnImageUpload(ItemModel pditem)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReadPDItemImgEdit.selectedPDItem), pditem);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var groupEdit = Modal.Show<ReadPDItemImgEdit>("제품 이미지 조회", parameters);
        var result = await groupEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }


    void btnUpdateClick(ItemModel ItemModel)
    {
        navigationManager.NavigateTo("/pdItemEdit" + "/" + CurrentUser.Identity.Name + "/" + ItemModel.ItemCd + "/" + ItemModel.BizUnit + "/" + ItemModel.FactBizUnit);
    }

    void btnDeleteClick(ItemModel ItemModel)
    {
        DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

        selectedPDItem = ItemModel;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var res = await _db.DeletePDItem(selectedPDItem, CurrentUser.Identity.Name);
            if (res.IsError())
            {
                await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");

            }

            await GetAllDatas();
        }
        else
        {
            selectedPDItem = null;
        }
    }

}
