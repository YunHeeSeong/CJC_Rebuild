@page "/ItemEdit"
@page "/ItemEdit/{loginId}"
@page "/ItemEdit/{loginId}/{itemCd}/{bizUnit}"

@using GMINWEB_CJC.Model
@using System.Data
@using DataAccessLibrary.Model
@using DataAccessLibrary.Data

@inject IFileData _fileManager
@inject IBizUnitData _bizUnitManager
@inject IItemData _itemManager
@inject ICommonCodeData _codeManager
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="itemModel">
    <div class="row">
        <div class="col-md">
            <RadzenFieldset Text="품목 정보">
                <div class="row">
                    <div class="align-items-center d-flex col-md-3">
                        <RadzenLabel Text="품목코드"></RadzenLabel>
                    </div>
                    <div class="col-md-3">
                        <RadzenTextBox Style="width:100%;" Name="ItemNm" @bind-Value="@itemModel.ItemCd" Disabled="true"></RadzenTextBox>

                    </div>
                    <div class="align-items-center d-flex col-md-3">
                        <RadzenLabel Text="품목명"></RadzenLabel>
                    </div>
                    <div class="col-md-3">
                        <RadzenTextBox Style="width:100%;" Name="ItemNm" @bind-Value="@itemModel.ItemNm"></RadzenTextBox>

                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="품목구분" Style="color: red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@itemModel.ItemCls"
                                        AllowFiltering="true" Data=@itemClsList TextProperty="CodeSubNm" ValueProperty="CodeSeq" />
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="대분류" Style="color: red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@itemModel.Item1Cls"
                                        AllowFiltering="true" Data=@item1ClsList TextProperty="CodeSubNm" ValueProperty="CodeSeq" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="중분류" Style="color: red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@itemModel.Item2Cls"
                                        AllowFiltering="true" Data=@item2ClsList TextProperty="CodeSubNm" ValueProperty="CodeSeq" />
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="소분류" Style="color: red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@itemModel.Item3Cls"
                                        AllowFiltering="true" Data=@item3ClsList TextProperty="CodeSubNm" ValueProperty="CodeSeq" />
                    </div>
                </div>
                <div class="row">
                    <div class="align-items-center d-flex col-md-3">
                        <RadzenLabel Text="단위"></RadzenLabel>
                    </div>
                    <div class="col-md-3">
                        <RadzenTextBox Style="width:100%;" Name="ItemNm" @bind-Value="@itemModel.Unit"></RadzenTextBox>

                    </div>
                    <div class="align-items-center d-flex col-md-3">
                        <RadzenLabel Text="금액"></RadzenLabel>
                    </div>
                    <div class="col-md-3">
                        <RadzenNumeric TValue="decimal" Name="AttachQty" @bind-Value="@itemModel.Price"></RadzenNumeric>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="비고"></RadzenLabel>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 align-items-center d-flex">
                        <RadzenTextArea @bind-Value="@itemModel.Remk" Class="w-100" />

                    </div>
                </div>
            </RadzenFieldset>

            <RadzenFieldset Text="품목 관련 문서">
                <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="신규" Click="@InsertRow" Disabled=@(fileModelToInsert != null) />
                <RadzenDataGrid @ref="detailGrid" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                                Data="@fileModels" TItem="FileModel" EmptyText="">
                    <Columns>
                        <RadzenDataGridColumn TItem="FileModel" Property="FileNo" Title="파일코드" Width="70px" CssClass="data_center"/>
                        <RadzenDataGridColumn TItem="FileModel" Property="ItemCd" Title="품목코드" Width="120px" CssClass="data_center"/>
                        <RadzenDataGridColumn TItem="FileModel" Property="ItemNm" Title="품목명" Width="200px" />
                        <RadzenDataGridColumn TItem="FileModel" Property="DetailCls" Title="파일구분" Width="120px" Visible="false">
                            <EditTemplate Context="file">
                                <RadzenNumeric Name="DetailCls" ReadOnly="true" @bind-Value="file.DetailCls"></RadzenNumeric>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Property="DetailClsNm" Title="파일구분명" Width="120px">

                            <EditTemplate Context="file">
                                <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100"
                                                AllowFiltering="true" Data=@DetailClsList TextProperty="CodeSubNm" ValueProperty="CodeSubNm" @bind-Value="file.DetailClsNm"
                                                SelectedItemChanged="@(args => OnChangeDetailCls(args, "파일구분"))" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Filterable="false" Title="업로드" Width="170px" CssClass="data_center">
                            <EditTemplate Context="file">
                                <BlazorFileUploader.InputFile OnChange="HandleFileSelected"></BlazorFileUploader.InputFile>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Property="FileNm" Title="파일명" Width="200px" />
                        <RadzenDataGridColumn TItem="FileModel" Property="FileData" Title="데이터" Width="100px" />
                        <RadzenDataGridColumn TItem="FileModel" Property="FileType" Title="파일형식" Width="120px" />
                        <RadzenDataGridColumn TItem="FileModel" Title="다운로드" Width="170px" CssClass="data_center">
                            <Template Context="file">
                                <RadzenButton Style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Light" Click="()=>btnDownloadFile(file)">다운로드</RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="file">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(file))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="file">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(file))">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(file))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                            <Template Context="file">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="file">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenFieldset>
        </div>
    </div>

    <div>
        <RadzenButton style="margin: 0 1rem 1rem 500px" ButtonStyle="ButtonStyle.Light" Click="btnCancleClick">취소</RadzenButton>
        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Secondary" Click="btnSaveClick">저장</RadzenButton>
    </div>
    <GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />

</RadzenTemplateForm>


@code {
    [Parameter] public string itemCd { get; set; }
    [Parameter] public string bizUnit { get; set; }
    [Parameter] public string loginId { get; set; }

    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    private HandMdItemModel handMdItemModel = new HandMdItemModel();
    private ItemModel itemModel = new ItemModel();

    private List<FileModel> fileModels;
    public FileModel selectedFile { get; set; }

    RadzenDataGrid<FileModel> detailGrid;

    private FileModel fileModelToInsert;
    private FileModel fileModelToDelete;

    string imgSrc = "";
    IFileListEntry file = null;
    byte[] _fileBytes = null;

    //코드헬프
    List<CommonCodeModel> itemClsList;
    List<CommonCodeModel> item1ClsList;
    List<CommonCodeModel> item2ClsList;
    List<CommonCodeModel> item3ClsList;
    List<CommonCodeModel> DetailClsList;


    bool isDisable;

    protected override async Task OnInitializedAsync()
    {
        if (itemCd is not null)
        {
            var itemList = await _itemManager.GetItem(loginId, bizUnit, itemCd);
            itemModel = itemList.FirstOrDefault();

            fileModels = await _itemManager.GetFile(itemModel, loginId);
        }

        var clsList = await _codeManager.FindCommonCodeFromName("품목구분", loginId);
        itemClsList = clsList.Where(x => x.CodeSeq != 1).ToList(); // 제품을 제외한 품목구분
        item1ClsList = await _codeManager.FindCommonCodeFromName("품목대분류", loginId);
        item2ClsList = await _codeManager.FindCommonCodeFromName("품목중분류", loginId);
        item3ClsList = await _codeManager.FindCommonCodeFromName("품목소분류", loginId);
        DetailClsList = await _codeManager.FindCommonCodeFromName("품목관련파일", loginId);

    }

    void OnChangeDetailCls(object value, string name)
    {
        if (value is not null && fileModelToInsert is not null)
        {
            fileModelToInsert.DetailCls = ((CommonCodeModel)value).CodeSeq;
            fileModelToInsert.DetailClsNm = ((CommonCodeModel)value).CodeSubNm;

        }
    }

    void btnCancleClick()
    {
        navigationManager.NavigateTo("/ItemManagement");
    }

    async Task btnSaveClick()
    {
        var errMessage = ValidationItem(itemModel);
        //필수값 체크
        if (errMessage == string.Empty)
        {
            //신규일때
            if (itemModel.ItemCd.GetNullToEmpty() == string.Empty)
            {
                await _itemManager.InsertItemData(loginId, itemModel);
            }
            //수정일때
            else
            {
                await _itemManager.UpdateItemData(loginId, itemModel);
            }

            navigationManager.NavigateTo("/ItemManagement");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", errMessage);
        }

    }

    async Task InsertRow()
    {
        if (itemModel.ItemCd.GetNullToEmpty() != string.Empty)
        {
            fileModelToInsert = new FileModel();
            fileModelToInsert.ItemCd = itemModel.ItemCd;
            fileModelToInsert.ItemNm = itemModel.ItemNm;
            fileModelToInsert.FileCls = 4;

            await detailGrid.InsertRow(fileModelToInsert);
        }

        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "파일 업로드는 품목 정보 저장 후 등록할 수 있습니다.");
        }
    }

    async Task EditRow(FileModel file)
    {
        fileModelToInsert = file;

        await detailGrid.EditRow(file);
    }

    async Task SaveRow(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        if (ValidationCheckFile(file) == true)
        {
            if (file.FileNo == 0)
            {
                //파일넘버가 채번되기 전이면 INSERT
                await _fileManager.InsertData(file, loginId);
            }
            else
            {
                //파일넘버가 기존에 존재하면 UPDATE
                await _fileManager.UpdateData(file, loginId);
            }
            await detailGrid.UpdateRow(file);
            fileModels = await _itemManager.GetFile(itemModel, loginId);
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "파일 종류와 파일을 선택하여 주십시오.");
        }
    }

    void CancelEdit(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        detailGrid.CancelEditRow(file);
    }

    async Task DeleteRow(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE
        if (fileModels.Contains(file))
        {
            selectedFile = file;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            detailGrid.CancelEditRow(file);
            await detailGrid.Reload();
        }
    }

    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        if (files.Count() > 0)
        {
            file = files.FirstOrDefault();
            using (var ms = new MemoryStream())
            {
                await file.Data.CopyToAsync(ms);
                _fileBytes = ms.ToArray();

                fileModelToInsert.FileNm = file.Name;
                fileModelToInsert.FileType = file.Type;
                fileModelToInsert.FileData = Convert.ToBase64String(_fileBytes);
            }
        }
    }


    void btnDownloadFile(FileModel file)
    {
        var fileArr = Convert.FromBase64String(file.FileData);
        jsRuntime.InvokeVoidAsync("DownloadAsFile", file.FileNm, file.FileType, fileArr);
    }

    bool ValidationCheckFile(FileModel file)
    {
        //필수값 미입력시 false 반환
        if (file.FileNm is null || file.FileData is null || file.FileType is null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _fileManager.DeleteData(selectedFile, loginId);

            fileModels = await _itemManager.GetFile(itemModel, loginId);
            await detailGrid.Reload();
        }
        else
        {
            selectedFile = null;
        }
    }


    string ValidationItem(ItemModel item)
    {
        ////필수값 미입력시 에러메세지 발행

        if (item.ItemNm.GetNullToEmpty() == string.Empty)
        {
            return "품목명을 입력하여 주십시오";
        }
        if (item.Item1Cls.GetNullToEmpty() == string.Empty)
        {
            return "대분류명을 입력하여 주십시오";
        }
        if (item.Item2Cls.GetNullToEmpty() == string.Empty)
        {
            return "중분류명을 입력하여 주십시오";
        }
        if (item.Item3Cls.GetNullToEmpty() == string.Empty)
        {
            return "소분류명을 입력하여 주십시오";
        }

        return string.Empty;
    }
}
