@page "/ReadBizUnitStore"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic;
@using System.Security.Claims

@inject IBizUnitData _db
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime

<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 기준정보관리 >
    <strong>매장조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
            <div>
                <div class="info_title">
                    <h1 class="sub_title">매장 조회</h1>
                </div>

                <div style="margin-top:45px">
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            <RadzenTabsItem Text="매장리스트">
                                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@bizunit" TItem="BizUnitModel" ColumnWidth="300px"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 매장이 없습니다.">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="BizUnitModel" Property="BizNm" Title="사업장명" Width="250px" />
                                        <RadzenDataGridColumn TItem="BizUnitModel" Property="BizLoc" Title="사업장위치" Width="400px" />
                                        <RadzenDataGridColumn TItem="BizUnitModel" Property="OwnerNm" Title="대표자명" Width="100px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="BizUnitModel" Property="PICNm" Title="담당자명" Width="100px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="BizUnitModel" Property="PhoneNo" Title="연락처" Width="200px" CssClass="data_center" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>

                    @*<GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@
                    </div>
                </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public string loginId { get; set; }


    private BizUnitModel bizUnitModel = new BizUnitModel();

    public BizUnitModel selectedBizUnit { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    ClaimsPrincipal CurrentUser;

    public int MenuId = 4;
    private string RoleYN;

    private List<BizUnitModel> bizunit;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    bizunit = await _db.GetStoreBizUnit(CurrentUser.Identity.Name);
                }
            }

        }
    }

    private async Task GetAllDatas()
    {
        bizunit = await _db.GetStoreBizUnit(CurrentUser.Identity.Name);
    }

    async Task btnNewClick()
    {
        var parameters = new ModalParameters();
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var bizUnitFactoryEdit = Modal.Show<BizUnitStoreEdit>("매장등록 및 수정", parameters);
        var result = await bizUnitFactoryEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }

    async Task btnUpdateClick(BizUnitModel bizUnit)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(BizUnitStoreEdit.selectedBizUnit), bizUnit);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var customerEdit = Modal.Show<BizUnitStoreEdit>("매장등록 및 수정", parameters);
        var result = await customerEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }

    }

    void btnDeleteClick(BizUnitModel bizUnit)
    {
        DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

        selectedBizUnit = bizUnit;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteData(selectedBizUnit, CurrentUser.Identity.Name);
            await GetAllDatas();
        }
        else
        {
            selectedBizUnit = null;
        }
    }
}
