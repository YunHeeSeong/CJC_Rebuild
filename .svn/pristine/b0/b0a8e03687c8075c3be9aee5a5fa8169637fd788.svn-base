@page "/ReadCustomer"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic
@using System.Security.Claims

@inject ICustomerData _db
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    <RadzenLabel Text=" > 고객관리 > " />
    <strong>고객조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
            <div>
                <div class="info_title">
                    <h1 class="sub_title">고객 조회</h1>
                    @*<div class="post_btn">
                        <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>
                    </div>*@

                </div>

                <div style="margin-top:45px">
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            <RadzenTabsItem Text="고객리스트">
                                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@customerModels" TItem="CustomerModel" ColumnWidth="300px"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                LogicalFilterOperator="LogicalFilterOperator.Or">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="CustomerCd" Title="고객코드" Width="130px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="BizUnitNm" Title="취급점" Width="150px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="CustomerNm" Title="고객명" Width="120px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="ConsultDt" Title="상담일자" Width="150px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="RankNm" Title="고객등급" Width="100px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Birth" Title="생년월일" Width="150px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Gender" Title="성별" Width="80px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="PhoneNo" Title="이동전화" Width="150px" CssClass="data_center" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Email" Title="이메일" Width="150px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Remk" Title="상담내역" Width="200px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="ZipCode" Title="우편번호" Width="100px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Address" Title="주소" Width="200px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Job" Title="직업" Width="120px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Hobby" Title="취미" Width="100px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="Motive" Title="방문동기" Width="200px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="HairLossType" Title="탈모유형" Width="120px" />
                                        <RadzenDataGridColumn TItem="CustomerModel" Property="WigExperience" Title="가발착용경험" Width="100px" />
                                        @*<RadzenDataGridColumn TItem="CustomerModel" Filterable="false" Title="수정 및 삭제" Width="230px">
                                <Template Context="customer">
                                    <RadzenButton Style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Light" Click="()=>btnUpdateClick(customer)">수정</RadzenButton>
                                    <RadzenButton Style="margin: 0 1rem 1rem 0; background-color: #375E99;" Click="()=>btnDeleteClick(customer)">삭제</RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>*@
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </div>


                <GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />


            </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public CustomerModel selectedCustomer { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 43;

    ClaimsPrincipal CurrentUser;
    private List<CustomerModel> customerModels;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    customerModels = await _db.GetAllCustomers(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        customerModels = await _db.GetAllCustomers(CurrentUser.Identity.Name);
    }


    async Task btnNewClick()
    {
        //var parameters = new ModalParameters();
        //parameters.Add("loginId", CurrentUser.Identity.Name);

        //var customerEdit = Modal.Show<CustomerEdit>("고객 등록", parameters);
        //var result = await customerEdit.Result;

        //if (!result.Cancelled)
        //{
        //    await GetAllDatas();
        //}

        navigationManager.NavigateTo("/customerEdit" + "/" + CurrentUser.Identity.Name);

    }

    async Task btnUpdateClick(CustomerModel customer)
    {
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(CustomerEdit.selectedCustomer), customer);
        //parameters.Add("loginId", CurrentUser.Identity.Name);

        //var customerEdit = Modal.Show<CustomerEdit>("조직등록 및 수정", parameters);
        //var result = await customerEdit.Result;

        //if (!result.Cancelled)
        //{
        //    await GetAllDatas();
        //}

        navigationManager.NavigateTo("/customerEdit" + "/" + CurrentUser.Identity.Name + "/" + customer.CustomerCd);

    }

    void btnDeleteClick(CustomerModel customer)
    {
        DeleteConfirmation.Show("삭제시 등록된 고객 관련 이미지도 삭제됩니다. 정말 삭제하시겠습니까 ?");

        selectedCustomer = customer;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteData(selectedCustomer, CurrentUser.Identity.Name);
            await GetAllDatas();
        }
        else
        {
            selectedCustomer = null;
        }
    }

}
