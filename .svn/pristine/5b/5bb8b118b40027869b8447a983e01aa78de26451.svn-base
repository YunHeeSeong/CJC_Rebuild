@page "/ReadFactOutItem"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic
@using System.Security.Claims

@inject IOutPDItemData _db
@inject IUserData _userManager;
@inject IBizUnitData _bizUnitManager
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    <RadzenLabel Text=" > 구매/재고관리 > " />
    <strong>출하조회(공장)</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">출하조회(공장)</h1>
            </div>


            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="주문서 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@outPDItemModels" TItem="OutPDItemModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" RowSelect="@RowSelect"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 이용이력이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="FactBizUnitNm" Title="공장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="BizUnitNm" Title="매장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="OrderNo" Title="주문번호" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="ItemCd" Title="품목코드" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="ItemNm" Title="품목명" Width="200px" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="StkQty" Title="재고수량" Width="80px" CssClass="data_right" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="OrderQty" Title="주문수량" Width="80px" CssClass="data_right" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="TotQty" Title="기출하수량" Width="80px" CssClass="data_right" FormatString="{0:n0}" />
                                    @*<RadzenDataGridColumn TItem="OutPDItemModel" Property="RQty" Title="출하잔여수량" Width="100px" />*@
                                    @*<RadzenDataGridColumn TItem="OutPDItemModel" Property="WorkStateNm" Title="작업상태" Width="100px" />*@
                                    @*<RadzenDataGridColumn TItem="OutPDItemModel" Filterable="false" Title="출하등록" Width="120px">
                                    <Template Context="outPDItem">
                                        <RadzenButton Style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Light" Click="()=>btnUpdateClick(outPDItem)">출하등록</RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>*@
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="출하 내역 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" Style="margin-top:20px"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@selectedOutPDItemModels" TItem="OutPDItemModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 출하내역이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="FactBizUnitNm" Title="공장명" Width="70px" Visible="false" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="BizUnitNm" Title="매장명" Width="70px" Visible="false" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="OutSeq" Title="출하순번" Width="70px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="OutDate" Title="출하일자" Width="150px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="OutQty" Title="출하수량" Width="80px" CssClass="data_right" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="Unit" Title="단위" Width="100px" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="Tax" Title="통관비" Width="100px" CssClass="data_right" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Property="Remk" Title="비고" Width="300px" />
                                    <RadzenDataGridColumn TItem="OutPDItemModel" Filterable="false" Title="거래명세표 출력" Width="200px" CssClass="data_center">
                                        <Template Context="outPDItem">
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkslateblue; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" ButtonStyle="ButtonStyle.Warning" Click="()=>btnShowReportClick(outPDItem)">거래명세표 출력</RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>
            <GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />


        </div>
            }
            else
            {
            <p>조회 권한이 없는 사용자입니다.</p>
            }
</Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
        [CascadingParameter] public IModalService Modal { get; set; }
        [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public OutPDItemModel selectedWorkOrder { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 28;

    ClaimsPrincipal CurrentUser;
    private List<BizUnitModel> BizUnitList;
    private List<OutPDItemModel> outPDItemModels;
    private List<OutPDItemModel> selectedOutPDItemModels;

    private OutPDItemModel outPDItemModel = new OutPDItemModel();
    private OutPDItemModel outPDItemModelToDelete;
    private string RoleYN;
    private string selectedBizUnit;
    private string selectedFactBizUnit;

    protected override async Task OnInitializedAsync()
    {
        //로그인을 한 사용자인지
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            //사용자 정보가 있는지
            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                //조회권한이 있는지
                if (RoleYN == "Y")
                {
                    //매장코드 가져오는 코드헬프
                    //BizUnitList = await _bizUnitManager.GetAllStoreBizUnit();

                    outPDItemModels = await _db.GetAllOrdersFromFact(CurrentUser.Identity.Name);
                }
            }
        }
    }

    #region // ** 이벤트 ** //

    //상단 그리드에서 주문 선택시 하단 출하내역 조회하는 이벤트
    public async Task RowSelect(OutPDItemModel outPDItem)
    {
        outPDItemModel = outPDItem;

        selectedBizUnit = outPDItemModel.BizUnit;
        selectedFactBizUnit = outPDItemModel.FactBizUnit;

        selectedOutPDItemModels = await _db.GetOutPDItemDetail(CurrentUser.Identity.Name, outPDItemModel);
    }


    //출하등록 버튼 이벤트
    async Task btnUpdateClick(OutPDItemModel outPDItem)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(FactOutItemEdit.selectedOutPDItem), outPDItem);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var outPDItemEdit = Modal.Show<FactOutItemEdit>("출하등록", parameters);
        var result = await outPDItemEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }

    }

    //레포트 출력 버튼 이벤트
    async Task btnShowReportClick(OutPDItemModel outPDItem)
    {
        //로그인한 유저 정보 가져오기
        var userList = await _userManager.GetUserCodeHelp(CurrentUser.Identity.Name);
        var bizType = userList.FirstOrDefault().BizType;

        ////공장일때 
        if (bizType == 2)
        {
            await jsRuntime.InvokeVoidAsync("alert", "거래명세서 조회 권한이 없는 사용자입니다.");
            return;
        }
        //협회 또는 매장일 때 
        else
        {
            string url = string.Format("Transaction?BizUnit={0}&FactBizUnit={1}&OrderNo={2}&OutSeq={3}", outPDItem.BizUnit, outPDItem.FactBizUnit, outPDItem.OrderNo, outPDItem.OutSeq);

            var parameter = new ModalParameters();

            DocumentViewer dv = new DocumentViewer();

            parameter.Add(nameof(dv.ReportUrl), url);

            var options = new ModalOptions()
            {
                Animation = ModalAnimation.FadeIn(1)
    ,
                Position = ModalPosition.Center
            };

            var documentviewer = Modal.Show<DocumentViewer>("View Report", parameter, options);
            var result = await documentviewer.Result;
        }
    }

    //삭제 확인 팝업
    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteData(outPDItemModelToDelete, CurrentUser.Identity.Name);
            await GetAllDatas();
        }
        else
        {
            outPDItemModelToDelete = null;
        }
    }

    //검색조건 이벤트
    void OnChangeBizUnitList(object value, string name)
    {
        if (value is not null)
        {
            selectedBizUnit = value.ToString();
        }
    }
    #endregion


    //재조회
    private async Task GetAllDatas()
    {
        outPDItemModels = await _db.GetAllOrdersFromFact(CurrentUser.Identity.Name);
        selectedOutPDItemModels = null;
    }
}
