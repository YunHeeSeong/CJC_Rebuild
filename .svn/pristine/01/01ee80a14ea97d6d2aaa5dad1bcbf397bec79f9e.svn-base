@page "/ReadpOrder"
@using System.Security.Claims
@using DataAccessLibrary.Model
@using DataAccessLibrary.Data

@inject IPOrderData _db
@inject IRoleData _roleManager
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime jsRuntime



<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 구매/재고관리 >
    <strong>발주서조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">발주서 조회</h1>
            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="발주서 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@purchaseOrderModels" TItem="POrderModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 주문이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="POrderModel" Property="BizUnitNm" Title="사업장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="POrderNo" Title="발주번호" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="POrderDt" Title="발주일자" Width="150px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="VatYNNm" Title="부가세여부" Width="80px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="GroupNm" Title="발주부서" Width="120px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="POrderUserIdNm" Title="발주담당자" Width="100px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="POrderCustCdNm" Title="발주업체" Width="150px" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="Amt" Title="공급가" Width="80px" FormatString="{0:n0}" CssClass="data_right" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="Vat" Title="부가세" Width="80px" FormatString="{0:n0}" CssClass="data_right" />
                                    <RadzenDataGridColumn TItem="POrderModel" Property="Remk" Title="비고" Width="400px" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>


                    </Tabs>
                </RadzenTabs>
            </div>
            @*<GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@

        </div>
        }
        else
        {
            <p>권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<POrderModel> selectedPOrderNo;

    public POrderModel deletePurchaseOrderModel { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 23;

    ClaimsPrincipal CurrentUser;
    private string RoleYN;


    private List<POrderModel> purchaseOrderModels;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _roleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    purchaseOrderModels = await _db.GetAllPOrder(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        purchaseOrderModels = await _db.GetAllPOrder(CurrentUser.Identity.Name);
    }

    void btnNewClick()
    {
        navigationManager.NavigateTo("/porderEdit" + "/" + CurrentUser.Identity.Name);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await _db.DeleteMasterData(deletePurchaseOrderModel, CurrentUser.Identity.Name);
            if (!result.IsError())
            {
                await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                await GetAllDatas();

            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());

            }
        }
        else
        {
            deletePurchaseOrderModel = null;
        }
    }

    void btnUpdateClick(POrderModel pOrder)
    {
        navigationManager.NavigateTo("/porderEdit" + "/" + CurrentUser.Identity.Name + "/" + pOrder.POrderNo);
    }


    void btnDeleteClick(POrderModel pOrder)
    {
        DeleteConfirmation.Show("삭제 시 발주서 상세내역도 삭제됩니다. 정말 삭제하시겠습니까 ?");

        deletePurchaseOrderModel = pOrder;
    }

    public async Task RowSelect(POrderModel pOrder)
    {
        selectedPOrderNo = await _db.GetDetailPOrder(pOrder.POrderNo, CurrentUser.Identity.Name);
    }

}

