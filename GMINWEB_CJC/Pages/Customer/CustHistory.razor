@page "/CustHisManagement"
@using System.Security.Claims
@using DataAccessLibrary.Data;
@using DataAccessLibrary.Model;

@inject IRoleData _roleManager
@inject ICustHistData _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 영업관리 >
    <strong>이용이력등록</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">이용이력 등록</h1>
                <div class="post_btn">
                    @*<RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>*@
                </div>
            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="이용이력 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@customerList" TItem="CustomerModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" RowSelect="@RowSelect"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 이용이력이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="CustomerCd" Title="고객코드" Width="100px"CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="BizUnitNm" Title="취급점" Width="150px" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="CustomerNm" Title="고객명" Width="120px" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="ConsultDt" Title="상담일자" Width="150px"CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="RankNm" Title="고객등급" Width="100px" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="Birth" Title="생년월일" Width="150px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="Gender" Title="성별" Width="90px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="PhoneNo" Title="이동전화" Width="150px" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="Email" Title="이메일" Width="150px" />
                                    <RadzenDataGridColumn TItem="CustomerModel" Property="ZipCode" Title="우편번호" Width="100px" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>

            <div style="margin-top:20px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="이용이력 상세 리스트">
                            <RadzenDataGrid @ref="detailGrid" AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@selectedCustHistCd" TItem="CustHistModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 이용이력 상세 정보가 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="BizUnitNm" Title="매장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="FactBizUnitNm" Title="생산사업장" Width="150px" />
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="OrderNo" Title="주문번호" Width="130px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="OrderDt" Title="주문일자" Width="150px"CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="ItemCd" Title="품목코드" Width="130px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="ItemNm" Title="품목명" Width="200px" />
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="Qty" Title="주문수량" Width="80px" FormatString="{0:n0}"/>
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="PayYN" Title="결제여부" Width="70px" CssClass="data_center"/>
                                    <RadzenDataGridColumn TItem="CustHistModel" Property="Remk" Title="비고" Width="200px">
                                        <EditTemplate Context="detailModel">
                                            <RadzenTextBox TValue="string" style="width: 100%;" Name="Remk" @bind-Value="detailModel.Remk" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="CustHistModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="170px">
                                        <Template Context="detailModel">
                                            <RadzenButton Text="수정" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(detailModel))" @onclick:stopPropagation="true">
                                            </RadzenButton>
                                        </Template>
                                        <EditTemplate Context="detailModel">
                                            <RadzenButton Text="저장" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(detailModel))">
                                            </RadzenButton>
                                            <RadzenButton Text="취소" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(detailModel))">
                                            </RadzenButton>
                                        </EditTemplate>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>
                @*<GMINWEB_Rebuild.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@

            </div>
            }
            else
            {
            <p>권한이 없는 사용자입니다.</p>
            }
</Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public CustHistModel deleteCommonCodeModel { get; set; }
    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 49;

    ClaimsPrincipal CurrentUser;
    private CustHistModel custHistToInsert;

    private List<CustomerModel> customerList;
    private List<CustHistModel> selectedCustHistCd;
    RadzenDataGrid<CustHistModel> detailGrid;


    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _roleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    customerList = await _db.GetAllCustomer(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        customerList = await _db.GetAllCustomer(CurrentUser.Identity.Name);
        selectedCustHistCd = null;
    }

    //async Task btnNewClick()
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add("loginId", CurrentUser.Identity.Name);

    //    var custHistEdit = Modal.Show<CustHistoryEdit>("이용이력 등록 및 수정", parameters);
    //    var result = await custHistEdit.Result;

    //    if (!result.Cancelled)
    //    {
    //        await GetAllDatas();
    //    }
    //}

    //async Task btnUpdateClick(CustomerModel customer)
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add(nameof(CustHistoryEdit.selectedCustHist), code);
    //    parameters.Add("loginId", CurrentUser.Identity.Name);

    //    var custHistEdit = Modal.Show<CustHistoryEdit>("이용이력 등록 및 수정", parameters);
    //    var result = await custHistEdit.Result;

    //    if (!result.Cancelled)
    //    {
    //        //show
    //        await GetAllDatas();
    //    }
    //}


    //void btnDeleteClick(CustHistModel code)
    //{
    //    DeleteConfirmation.Show("삭제 시 고객의 상세 이용이력도 삭제됩니다. 정말 삭제하시겠습니까 ?");

    //    deleteCommonCodeModel = code;
    //}


    async Task EditRow(CustHistModel detailModel)
    {
        await detailGrid.EditRow(detailModel);
    }

    async Task SaveRow(CustHistModel detailModel)
    {
        if (detailModel == custHistToInsert)
        {
            custHistToInsert = null;
        }

        await _db.UpdateData(detailModel, CurrentUser.Identity.Name);

        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");



        //재조회
        await detailGrid.UpdateRow(detailModel);
        customerList = await _db.GetAllCustomer(CurrentUser.Identity.Name);
        selectedCustHistCd = null;

    }


    void CancelEdit(CustHistModel detailModel)
    {
        if (detailModel == custHistToInsert)
        {
            custHistToInsert = null;
        }

        detailGrid.CancelEditRow(detailModel);
    }

    public async Task RowSelect(CustomerModel customer)
    {
        selectedCustHistCd = await _db.GetCustHistFromCustomer(CurrentUser.Identity.Name, customer);
    }

}