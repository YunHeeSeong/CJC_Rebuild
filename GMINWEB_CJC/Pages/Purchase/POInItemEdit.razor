@page "/POInItemEdit"
@page "/POInItemEdit/{loginId}"
@page "/POInItemEdit/{loginId}/{selectedPOInItemNo}"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data

@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DialogService DialogService
@inject IPOInItemData _db
@inject ICustomerData _customerManager
@inject IItemData _itemManager
@inject IGroupData _groupManager
@inject IUserData _userManager
@inject IJSRuntime jsRuntime
@inject ICommonCodeData _codeManager
 
<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="masterModel">
    <div class="row">
        <div class="col-sm">
            <RadzenFieldset Text="구매입고 내역">
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입고번호"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenTextBox ReadOnly="true" Placeholder="자동채번" Style="width:100%;" Name="POInItemNo" @bind-Value="@masterModel.POInItemNo"></RadzenTextBox>
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입고일자"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDatePicker @bind-Value=@POInDate DateFormat="yyyy-MM-dd" Change="@(arg=> POInDateChanged(arg))" Class="w-100" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입고담당자" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@masterModel.POInUserId" Name="POInUserId"
                                        AllowFiltering="true" Data=@POInUserIdList TextProperty="UserNm" ValueProperty="UserCd"
                                        Change=@(args => OnChangePOInUserId(args, "DropDown with virtualization")) />

                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입고담당부서" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="@masterModel.POInGroupCd" Name="POInGroupCd"
                                        AllowFiltering="true" Data=@GroupCdList TextProperty="GroupNm" ValueProperty="GroupCd" Disabled="true" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입고업체" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" @bind-Value="@masterModel.POInCustCd" Name="POInCustCd"
                                        AllowFiltering="true" Data=@CustomerCdList TextProperty="CustomerNm" ValueProperty="CustomerCd"
                                        Change=@(args => OnChangeCustomerCd(args, "DropDown with virtualization")) />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="총입고수량"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Amt" @bind-Value="@masterModel.TotQty" ReadOnly="true" Format="n0"/>
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="총입고금액"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Vat" @bind-Value="@masterModel.TotAmt" ReadOnly="true" Format="n0"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="비고"></RadzenLabel>
                    </div>
                    <div class="col-sm-9">
                        <RadzenTextBox Style="width:100%;" Name="Remk" @bind-Value="@masterModel.Remk"></RadzenTextBox>
                    </div>
                </div>
            </RadzenFieldset>
            <RadzenFieldset Text="구매입고 상세내역">
                <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="신규" Click="@InsertRow" Disabled=@(pOInItemToInsert != null) />

                <RadzenDataGrid @ref="detailGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                                Data="detailModels" TItem="POInItemModel" EmptyText="">
                    <Columns>
                        <RadzenDataGridColumn TItem="POInItemModel" Context="detailModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="180px" CssClass="data_center">
                            <EditTemplate Context="detailModel">
                                <RadzenButton Text="발주서선택" ButtonStyle="ButtonStyle.Secondary" Click=@OpenPOrder />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="POInItemNo" Title="입고번호" Width="120px"  CssClass="data_center"/>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Seq" Title="입고순번" Width="70px"  CssClass="data_center"/>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="POrderNo" Title="발주번호" Width="120px"  CssClass="data_center">
                            <EditTemplate Context="detailModel">
                                <RadzenTextBox Style="width:100%;" Name="POrderNo" @bind-Value="@detailModel.POrderNo" Disabled="true"></RadzenTextBox>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="POSeq" Title="발주순번" Width="70px"  CssClass="data_center">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="int" style="width: 100%;" Name="POSeq" @bind-Value="detailModel.POSeq" Disabled="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="POrderQty" Title="발주수량" Width="70px"  CssClass="data_center">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="POrderQty" @bind-Value="detailModel.POrderQty" Disabled="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="ItemCd" Title="품목코드" Width="150px"  CssClass="data_center">
                            <EditTemplate Context="detailModel">
                                <RadzenTextBox Style="width:100%;" Name="ItemCd" @bind-Value="@detailModel.ItemCd" Disabled="true"></RadzenTextBox>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="ItemNm" Title="품목명" Width="120px">
                            <EditTemplate Context="detailModel">
                                <RadzenTextBox Style="width:100%;" Name="ItemNm" @bind-Value="@detailModel.ItemNm" Disabled="true"></RadzenTextBox>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Qty" Title="양품수량" Width="80px" FormatString="{0:n0}">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Qty" @bind-Value="detailModel.Qty" Change="(args)=>ChnageQty(args)" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="BadQty" Title="불량수량" Width="80px" FormatString="{0:n0}">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="BadQty" @bind-Value="detailModel.BadQty" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="BadType" Title="불량유형" Width="110px">
                            <EditTemplate Context="detailModel">
                                <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100"
                                                AllowFiltering="true" Data=@BadTypeList TextProperty="CodeSubNm" ValueProperty="CodeSeq" @bind-Value="detailModel.BadType"/>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Price" Title="단가" Width="100px" FormatString="{0:n0}">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Price" @bind-Value="detailModel.Price" Disabled="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Amt" Title="금액" Width="100px" FormatString="{0:n0}">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Amt" @bind-Value="detailModel.Amt" Disabled="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Unit" Title="단위" Width="100px">
                            <EditTemplate Context="detailModel">
                                <RadzenTextBox Style="width:100%;" Name="Unit" @bind-Value="@detailModel.Unit" Disabled="true"></RadzenTextBox>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Property="Weight" Title="중량" Width="100px" FormatString="{0:n0}">
                            <EditTemplate Context="detailModel">
                                <RadzenNumeric TValue="decimal" style="width: 100%;" Name="Weight" @bind-Value="detailModel.Weight" Disabled="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="POInItemModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="200px">
                            <EditTemplate Context="detailModel">
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="저장" Class="m-1" Click="@((args) => SaveRow(detailModel))">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(detailModel))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenFieldset>
        </div>
    </div>

    <GMINWEB_Rebuild.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />


    <div style="width:300px;margin:0 auto;">
        <RadzenButton style="margin: 0 1rem 1rem 60px" ButtonStyle="ButtonStyle.Light" Click="btnCancleClick">취소</RadzenButton>
        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Secondary" Click="btnSaveClick">저장</RadzenButton>
    </div>
</RadzenTemplateForm>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public string selectedPOInItemNo { get; set; }
    [Parameter] public string loginId { get; set; }

    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    private List<POInItemModel> masterModels;
    private List<POInItemModel> detailModels;
    private List<UserModel> POInUserIdList;
    private List<GroupModel> GroupCdList;
    private List<ItemModel> ItemCdList;
    private List<CustomerModel> CustomerCdList;
    private List<CommonCodeModel> BadTypeList;


    RadzenDataGrid<POInItemModel> detailGrid;

    POInItemModel masterModel = new POInItemModel();
    POInItemModel detailModel = new POInItemModel();

    private POInItemModel pOInItemToInsert;

    DateTime POInDate;

    protected override async Task OnInitializedAsync()
    {
        if (selectedPOInItemNo is not null)
        {
            masterModels = await _db.GetMasterPOInItem(selectedPOInItemNo, loginId);
            masterModel = masterModels.FirstOrDefault();

            POInDate = Convert.ToDateTime(masterModel.POInDate);

            detailModels = await _db.GetDetailPOInItem(selectedPOInItemNo, masterModel.BizUnit);

        }
        else
        {
            POInDate = DateTime.Today;
            masterModel.POInDate = DateTime.Today.ToString("yyyy-MM-dd");

        }

        POInUserIdList = await _userManager.GetUserFromCodehelp(loginId);
        GroupCdList = await _groupManager.GetGroup(loginId);
        //ItemCdList = await _itemManager.GetAllItem(loginId);
        CustomerCdList = await _customerManager.GetAccountFromCodehelp(loginId);
        BadTypeList = await _codeManager.FindCommonCodeFromName("불량유형", loginId);

    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        //console.Log("Dialog opened");
    }

    void Close(dynamic result)
    {
        //console.Log($"Dialog closed");
    }

    public async Task OpenPOrder()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DialogPOrderList.POInCustCd), masterModel.POInCustCd);
        parameters.Add("loginId", loginId);

        var groupEdit = Modal.Show<DialogPOrderList>("발주서 선택", parameters);
        var result = await groupEdit.Result;

        if (!result.Cancelled)
        {
            if (DialogPOrderList.selectedPOrder is not null)
            {
                var selectedPOrder = DialogPOrderList.selectedPOrder;
                pOInItemToInsert.POrderNo = selectedPOrder.POrderNo;
                pOInItemToInsert.POSeq = selectedPOrder.Seq;
                pOInItemToInsert.ItemCd = selectedPOrder.ItemCd;
                pOInItemToInsert.ItemNm = selectedPOrder.ItemNm;
                pOInItemToInsert.Price = selectedPOrder.Price;
                pOInItemToInsert.Unit = selectedPOrder.UnitCd;
                pOInItemToInsert.Weight = selectedPOrder.Weight;
                pOInItemToInsert.POrderQty = selectedPOrder.Qty;
            }

        }
    }

    void btnCancleClick()
    {
        navigationManager.NavigateTo("/POInItemManagement");
    }

    async Task InsertRow()
    {
        if (masterModel.POInItemNo.GetNullToEmpty() != string.Empty)
        {
            pOInItemToInsert = new POInItemModel();
            pOInItemToInsert.POInItemNo = masterModel.POInItemNo;

            await detailGrid.InsertRow(pOInItemToInsert);
        }

        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "상세 정보는 저장 후 등록할 수 있습니다.");
        }
    }

    async Task EditRow(POInItemModel pOInItem)
    {
        pOInItemToInsert = pOInItem;

        await detailGrid.EditRow(pOInItem);
    }

    async Task SaveRow(POInItemModel pOInItem)
    {
        if (pOInItem == pOInItemToInsert)
        {
            pOInItemToInsert = null;
        }

        //필수값 체크
        var errMessage = ValidationCheckPOrderDetail(pOInItem);

        if (errMessage == string.Empty)
        {
            if (pOInItem.Seq == 0)
            {
                //코드가 채번되기 전이면 INSERT
                pOInItem.POInDate = masterModel.POInDate;
                var res = await _db.InsertDetailData(pOInItem, masterModel.POInItemNo, loginId);
                if (!res.IsError())
                {
                    await detailGrid.UpdateRow(pOInItem);
                    detailModels = await _db.GetDetailPOInItem(pOInItem.POInItemNo, masterModel.BizUnit);

                    //입고 총수량 및 총금액 재계산 후 재로드
                    CalculateQtyAmt(detailModels);
                    var result = await _db.UpdateMasterData(masterModel, loginId);
                    masterModels = await _db.GetMasterPOInItem(pOInItem.POInItemNo, loginId);
                    masterModel = masterModels.FirstOrDefault();

                }
                else
                {
                    await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());

                }
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", errMessage);
            }

        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "품목코드와 수량, 입고예정일자를 입력하여 주십시오.");
        }


    }

    void CancelEdit(POInItemModel pOInItem)
    {
        if (pOInItem == pOInItemToInsert)
        {
            pOInItemToInsert = null;
        }

        detailGrid.CancelEditRow(pOInItem);
    }

    async Task DeleteRow(POInItemModel pOInItem)
    {
        if (pOInItem == pOInItemToInsert)
        {
            pOInItemToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE
        if (detailModels.Contains(pOInItem))
        {
            pOInItemToInsert = pOInItem;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            detailGrid.CancelEditRow(pOInItem);
            await detailGrid.Reload();
        }
    }

    async Task btnSaveClick()
    {
        //필수값 체크
        if (ValidationCheckPOrderMaster(masterModel) == true)
        {
            //신규일때
            if (masterModel.POInItemNo.GetNullToEmpty() == string.Empty)
            {
                var result = await _db.InsertMasterData(masterModel, loginId);
                if (result.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                }
                else
                {
                    await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");

                    masterModels = await _db.GetMasterPOInItem(result.FirstOrDefault().RTN_KEY, loginId);
                    masterModel = masterModels.FirstOrDefault();

                    detailModels = await _db.GetDetailPOInItem(masterModel.POInItemNo, masterModel.BizUnit);
                }
                //await ModalInstance.CloseAsync(ModalResult.Ok("Form was submitted successfully."));
            }

            //수정일때
            else
            {
                //총수량, 총금액 구하기
                CalculateQtyAmt(detailModels);

                var result = await _db.UpdateMasterData(masterModel, loginId);

                if (result.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());

                }
                else
                {
                    navigationManager.NavigateTo("/POInItemManagement");

                }
            }
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "발주담당자를 입력하여 주십시오.");
        }

    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteDetailData(pOInItemToInsert, loginId);

            detailModels = await _db.GetDetailPOInItem(masterModel.POrderNo, masterModel.BizUnit);
            await detailGrid.Reload();
        }
        else
        {
            pOInItemToInsert = null;
        }
    }

    string ValidationCheckPOrderDetail(POInItemModel pOInItem)
    {
        //필수값 미입력시 false 반환
        if (pOInItem.ItemCd.GetNullToEmpty() == string.Empty)
        {
            return "품목을 선택하여 주십시오.";
        }
        if (pOInItem.Qty.GetDecimalNullToZero() == 0 && pOInItem.BadQty.GetDecimalNullToZero() == 0)
        {
            return "양품수량 또는 불량수량을 입력하여 주십시오";
        }
        if (pOInItem.BadQty.GetDecimalNullToZero() > 0 && pOInItem.BadType.GetIntNullToZero() == 0)
        {
            return "불량유형을 선택하여 주십시오";
        }
        if (pOInItem.BadQty.GetDecimalNullToZero() == 0 && pOInItem.BadType.GetIntNullToZero() != 0)
        {
            return "불량수량을 입력하여 주십시오";
        }
        else
        {
            return string.Empty;
        }
    }

    bool ValidationCheckPOrderMaster(POInItemModel pOInItem)
    {
        //필수값 미입력시 false 반환
        if (pOInItem.POInCustCd.GetNullToEmpty() == string.Empty)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    async Task OnChangePOInUserId(object value, string name)
    {
        if (value is not null)
        {
            masterModel.POInUserId = (int)value;

            var userModels = await _userManager.GetUser(masterModel.POInUserId, loginId);
            masterModel.POInGroupCd = userModels.FirstOrDefault().GroupCd;
        }
    }

    void OnChangeItemCd(object value, string name)
    {
        if (value is not null)
        {
            detailModel.ItemCd = value.ToString();
        }
    }

    void OnChangeCustomerCd(object value, string name)
    {
        if (value is not null)
        {
            masterModel.POInCustCd = value.ToString();
        }
    }

    void POInDateChanged(object value)
    {
        if (value is not null)
        {
            masterModel.POInDate = (Convert.ToDateTime(value)).ToString("yyyy-MM-dd");
        }

    }

    void ChnageQty(object value)
    {
        if (value is not null)
        {
            var qty = Convert.ToDecimal(value);
            pOInItemToInsert.Amt = qty * pOInItemToInsert.Price;
        }
    }

    void CalculateQtyAmt(List<POInItemModel> pOInItem)
    {
        decimal totQty = 0;
        decimal totAmt = 0;

        if (pOInItem.Count > 0)
        {
            foreach (var item in pOInItem)
            {
                totQty += item.Qty;
                totAmt += item.Amt;
            }

            masterModel.TotQty = totQty;
            masterModel.TotAmt = totAmt;
        }
    }
}
