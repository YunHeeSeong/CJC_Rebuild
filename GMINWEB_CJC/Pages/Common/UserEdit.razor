@using GMINWEB_Rebuild.Model
@using System.Data
@using DataAccessLibrary.Model
@using DataAccessLibrary.Data

@inject ICommonCodeData _codeManager
@inject IRoleData _roleManager
@inject IBizUnitData _bizUnitManger
@inject IGroupData _groupManager
@inject IFileData _fileManager
@inject IUserData _db
@inject IJSRuntime jsRuntime

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Style="width:1000px; overflow-x:auto; height:650px; overflow-y:auto;" Data="userModel">
    <div class="row">
        <div class="col-sm">
            <RadzenFieldset Text="사용자 정보">
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="사용자코드" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenNumeric TValue="int" ReadOnly="true" style="width: 100%;" Name="UserCd" @bind-Value="@userModel.UserCd" />
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="사용자명" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenTextBox Style="width:100%;" Name="UserNm" @bind-Value="@userModel.UserNm"></RadzenTextBox>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="아이디" Style="color:red"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenTextBox Style="width:100%;" ReadOnly="true" Name="LoginId" @bind-Value="@userModel.LoginId"></RadzenTextBox>
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="입사일자"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDatePicker @bind-Value=@hiredate DateFormat="yyyy-MM-dd" Change=@(args => OnChangeHireDate(args)) Class="w-100" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="사업장명"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        @*<RadzenTextBox Style="width:100%;" Name="BizNm" @bind-Value="@userModel.BizNm"></RadzenTextBox>*@

                        <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100" @bind-Value="userModel.BizUnit"
                            AllowFiltering="true" Data=@bizUnitList TextProperty="BizNm" ValueProperty="BizUnit"
                            Change=@(args => OnChangeBizUnit(args, "DropDown with virtualization")) />
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="부서명"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        @*<RadzenTextBox Style="width:100%;" Name="GroupNm" @bind-Value="@userModel.GroupNm"></RadzenTextBox>*@
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="userModel.GroupCd"
                            AllowFiltering="true" Data=@groupList TextProperty="GroupNm" ValueProperty="GroupCd"
                            Change=@(args => OnChangeGroup(args, "DropDown with virtualization")) />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="권한"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenDropDown AllowClear="true" TValue="int" AllowVirtualization="true" Class="w-100" @bind-Value="userModel.RoleId"
                                        AllowFiltering="true" Data=@roleList TextProperty="RoleNm" ValueProperty="RoleId"
                                        Change=@(args => OnChangeRole(args, "DropDown with virtualization")) />
                    </div>
                    <div class="col-sm-3 align-items-center d-flex">
                        <RadzenLabel Text="핸드폰번호"></RadzenLabel>
                    </div>
                    <div class="col-sm-3">
                        <RadzenTextBox Style="width:100%;" Name="UserNm" @bind-Value="@userModel.PhoneNo"></RadzenTextBox>
                    </div>
                </div>
            </RadzenFieldset>

            <RadzenFieldset Text="사용자 관련 문서">
                <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="신규" Click="@InsertRow" Disabled=@(fileModelToInsert != null) />
                <RadzenDataGrid @ref="detailGrid" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                                Data="@fileModels" TItem="FileModel" AllowColumnResize="true" EmptyText="">
                    <Columns>
                        <RadzenDataGridColumn TItem="FileModel" Property="FileNo" Title="파일코드" Width="80px" CssClass="data_center" />
                        <RadzenDataGridColumn TItem="FileModel" Property="UserCd" Title="사용자코드" Width="90px" CssClass="data_center" />
                        <RadzenDataGridColumn TItem="FileModel" Property="DetailCls" Title="파일구분" Width="120px" Visible="false">
                            <EditTemplate Context="file">
                                <RadzenNumeric Name="DetailCls" ReadOnly="true" @bind-Value="file.DetailCls"></RadzenNumeric>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Property="DetailClsNm" Title="파일구분명" Width="120px">

                            <EditTemplate Context="file">
                                <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Class="w-100"
                                                AllowFiltering="true" Data=@DetailClsList TextProperty="CodeSubNm" ValueProperty="CodeSubNm" @bind-Value="file.DetailClsNm"
                                                SelectedItemChanged="@(args => OnChangeDetailCls(args, "파일구분"))" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Filterable="false" Title="업로드" Width="220px" CssClass="data_center">
                            <EditTemplate Context="file">
                                <BlazorFileUploader.InputFile OnChange="HandleFileSelected"></BlazorFileUploader.InputFile>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Property="FileNm" Title="파일명" Width="200px" />
                        <RadzenDataGridColumn TItem="FileModel" Property="FileData" Title="데이터" Width="100px" />
                        <RadzenDataGridColumn TItem="FileModel" Property="FileType" Title="파일형식" Width="120px" />
                        <RadzenDataGridColumn TItem="FileModel" Title="다운로드" Width="150px" CssClass="data_center">
                            <Template Context="file">
                                <RadzenButton ButtonStyle="ButtonStyle.Light" Click="()=>btnDownloadFile(file)">다운로드</RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="file">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(file))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="file">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(file))">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(file))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FileModel" Context="file" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                            <Template Context="file">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="file">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenFieldset>
        </div>
    </div>

    <div style="width:300px;margin:0 auto;">
        <RadzenButton style="margin: 0 1rem 1rem 60px" ButtonStyle="ButtonStyle.Light" Click="btnCancleClick">취소</RadzenButton>
        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Secondary" Click="btnSaveClick">저장</RadzenButton>
    </div>

    <GMINWEB_Rebuild.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />

</RadzenTemplateForm>


@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public UserModel selectedUser { get; set; }
    [Parameter] public string loginId { get; set; }

    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    private List<FileModel> fileModels;
    public FileModel selectedFile { get; set; }

    List<BizUnitModel> bizUnitList;
    List<GroupModel> groupList;
    List<RoleModel> roleList;
    RadzenDataGrid<FileModel> detailGrid;
    List<CommonCodeModel> DetailClsList;


    private FileModel fileModelToInsert;
    private FileModel fileModelToDelete;

    string imgSrc = "";
    IFileListEntry file = null;
    byte[] _fileBytes = null;


    private UserModel userModel = new UserModel();

    DateTime hiredate = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        if (selectedUser is not null)
        {
            userModel.UserCd = selectedUser.UserCd;
            userModel.LoginId = selectedUser.LoginId;
            userModel.UserNm = selectedUser.UserNm;
            userModel.BizUnit = selectedUser.BizUnit;
            userModel.BizNm = selectedUser.BizNm;
            userModel.GroupCd = selectedUser.GroupCd;
            userModel.GroupNm = selectedUser.GroupNm;
            userModel.RoleId = selectedUser.RoleId;
            userModel.RoleNm = selectedUser.RoleNm;
            userModel.PhoneNo = selectedUser.PhoneNo;
            userModel.Email = selectedUser.Email;

            if (selectedUser.HireDate.GetNullToEmpty() == string.Empty)
            {
                hiredate = DateTime.Today;
                userModel.HireDate = hiredate.ToString("yyyy-MM-dd");
            }
            else
            {
                hiredate = Convert.ToDateTime(selectedUser.HireDate);
                userModel.HireDate = selectedUser.HireDate;
            }

            bizUnitList = await _bizUnitManger.GetAllBizUnit(loginId);
            roleList = await _roleManager.GetRoleMasterList(loginId);
            groupList = await _groupManager.GetGroup(loginId);
            fileModels = await _db.GetFile(userModel.UserCd, loginId);
            DetailClsList = await _codeManager.FindCommonCodeFromName("사용자관련파일", loginId);

        }
    }

    void OnChangeDetailCls(object value, string name)
    {
        if (value is not null && fileModelToInsert is not null)
        {
            fileModelToInsert.DetailCls = ((CommonCodeModel)value).CodeSeq;
            fileModelToInsert.DetailClsNm = ((CommonCodeModel)value).CodeSubNm;

        }
    }

    async Task InsertRow()
    {
        fileModelToInsert = new FileModel();
        fileModelToInsert.UserCd = userModel.UserCd;
        fileModelToInsert.FileCls = 3; //사용자 관련 파일

        await detailGrid.InsertRow(fileModelToInsert);
    }

    async Task EditRow(FileModel file)
    {
        fileModelToInsert = file;

        await detailGrid.EditRow(file);
    }

    async Task SaveRow(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        if (ValidationCheckFile(file) == true)
        {
            if (file.FileNo == 0)
            {
                //파일넘버가 채번되기 전이면 INSERT 
                await _fileManager.InsertData(file, loginId);
            }
            else
            {
                //파일넘버가 기존에 존재하면 UPDATE
                await _fileManager.UpdateData(file, loginId);
            }
            await detailGrid.UpdateRow(file);
            fileModels = await _db.GetFile(userModel.UserCd, loginId);
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "파일 종류와 파일을 선택하여 주십시오.");
        }
    }

    void CancelEdit(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        detailGrid.CancelEditRow(file);
    }

    async Task DeleteRow(FileModel file)
    {
        if (file == fileModelToInsert)
        {
            fileModelToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE 
        if (fileModels.Contains(file))
        {
            selectedFile = file;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            detailGrid.CancelEditRow(file);
            await detailGrid.Reload();
        }
    }

    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        if (files.Count() > 0)
        {
            file = files.FirstOrDefault();
            using (var ms = new MemoryStream())
            {
                await file.Data.CopyToAsync(ms);
                _fileBytes = ms.ToArray();

                fileModelToInsert.FileNm = file.Name;
                fileModelToInsert.FileType = file.Type;
                fileModelToInsert.FileData = Convert.ToBase64String(_fileBytes);
            }
        }
    }

    void btnDownloadFile(FileModel file)
    {
        var fileArr = Convert.FromBase64String(file.FileData);
        jsRuntime.InvokeVoidAsync("DownloadAsFile", file.FileNm, file.FileType, fileArr);
    }


    void btnCancleClick()
    {
        ModalInstance.CancelAsync();
    }

    async Task btnSaveClick()
    {
        //필수값 체크
        if (ValidationCheckUser(userModel) == true)
        {
            await _db.UpdateUser(userModel,loginId);
            await ModalInstance.CloseAsync(ModalResult.Ok("Form was submitted successfully."));
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "사용자명, 사업장 정보를 입력하여 주십시오.");
        }
    }

    bool ValidationCheckUser(UserModel user)
    {
        //필수값 미입력시 false 반환
        if (user.UserNm.GetNullToEmpty() == string.Empty) return false;
        //if (user.GroupCd.GetIntNullToZero ()== 0) return false;
        if (user.BizUnit.GetIntNullToZero() == 0) return false;

        else return true;
    }

    bool ValidationCheckFile(FileModel file)
    {
        //필수값 미입력시 false 반환
        if (file.FileNm is null || file.FileData is null || file.FileType is null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    void OnChangeBizUnit(object value, string name)
    {
        if (value is not null)
        {
            userModel.BizUnit = value.ToString();
        }
    }

    void OnChangeGroup(object value, string name)
    {
        if (value is not null)
        {
            userModel.GroupCd = (int)value;
        }
    }

    void OnChangeRole(object value, string name)
    {
        if (value is not null)
        {
            userModel.RoleId = (int)value;
        }
    }

    void OnChangeHireDate(DateTime? value)
    {
        if (value is not null)
        {
            userModel.HireDate = ((DateTime)value).ToString("yyyy-MM-dd");
        }
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _fileManager.DeleteData(selectedFile, loginId);
            fileModels = await _db.GetFile(userModel.UserCd, loginId);
            await detailGrid.Reload();
        }
        else
        {
            selectedFile = null;
        }
    }
}
