@page "/ReadUser"
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using DataAccessLibrary.Data;
@using DataAccessLibrary.Model;

@inject IUserData _db
@inject IRoleData _roleManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 기준정보관리 >
    <strong>사용자조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">사용자 조회</h1>
                <div style="margin-bottom:15px"></div>
            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="사용자 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true" AllowSorting="true" Data="@userList" TItem="UserModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 사용자가 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="UserModel" Property="UserCd" Title="사용자코드" Width="100px" Visible="false" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="UserNm" Title="사용자명" Width="100px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="LoginId" Title="아이디" Width="230px" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="BizNm" Title="사업장명" Width="180px" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="GroupNm" Title="부서명" Width="80px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="PhoneNo" Title="핸드폰번호" Width="200px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="Email" Title="이메일" Width="200px" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="RoleNm" Title="권한" Width="180px" />
                                    <RadzenDataGridColumn TItem="UserModel" Property="HireDate" Title="입사일자" Width="180px" CssClass="data_center" />
                                    @*<RadzenDataGridColumn TItem="UserModel" Filterable="false" Title="수정 및 삭제" Width="230px">
                                    <Template Context="user">
                                        <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkblue; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" ButtonStyle="ButtonStyle.Light" Click="()=>btnUpdateClick(user)">수정</RadzenButton>
                                        <RadzenButton Style="margin: 0 1rem 1rem 0; background-color: #375E99;" Click="()=>btnDeleteClick(user)">삭제</RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>*@
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
                </div>
                @*<GMINWEB_Rebuild.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@

            </div>
            }
            else
            {
            <p>권한이 없는 사용자입니다.</p>
            }
</Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public UserModel selectedUser { get; set; }
    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 2;

    ClaimsPrincipal CurrentUser;

    private List<UserModel> userList;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _roleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    userList = await _db.GetAllUsers(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        userList = await _db.GetAllUsers(CurrentUser.Identity.Name);
    }

    async Task btnUpdateClick(UserModel user)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UserEdit.selectedUser), user);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var roleEdit = Modal.Show<UserEdit>("사용자 정보 수정", parameters);
        var result = await roleEdit.Result;

        if (!result.Cancelled)
        {
            //show
            await GetAllDatas();
        }
    }


    void btnDeleteClick(UserModel user)
    {
        DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

        selectedUser = user;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteUser(selectedUser);
            await GetAllDatas();
        }
        else
        {
            selectedUser = null;
        }
    }
}