@page "/ReadNotice"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic;
@using System.Security.Claims

@inject INoticeData _db
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime
@inject IUserData _userData
<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 기준정보관리 >
    <strong>공지사항조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">공지사항 조회</h1>
                <div class="post_btn">
                    @*       <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>*@
                </div>

            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="공지사항리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@notice" TItem="NoticeModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 공지사항이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="NoticeModel" Property="NoticeCd" Title="코드" Width="70px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="NoticeModel" Property="Title" Title="제목" Width="200px" />
                                    <RadzenDataGridColumn TItem="NoticeModel" Property="Contents" Title="내용" Width="700px" />
                                    <RadzenDataGridColumn TItem="NoticeModel" Property="StartDate" Title="게시시작일" Width="120px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="NoticeModel" Property="EndDate" Title="게시종료일" Width="120px" CssClass="data_center" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>


            <GMINWEB_Rebuild.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />

        </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public string loginId { get; set; }

    private NoticeModel noticeModel = new NoticeModel();

    public NoticeModel selectedNoticeCd { get; set; }
    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 14;
    private string RoleYN;

    ClaimsPrincipal CurrentUser;
    string currentUserBizUnit;

    private List<NoticeModel> notice;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                var userDatas = await _userData.GetUser(CurrentUser.Identity.Name);
                currentUserBizUnit = userDatas.FirstOrDefault().BizUnit;

                //await _db.GetNoticeRole(CurrentUser.Identity.Name);

                if (RoleYN == "Y")
                {
                    notice = await _db.GetNotice(CurrentUser.Identity.Name);

                }
            }

        }
    }

    private async Task GetAllDatas()
    {
        notice = await _db.GetNotice(CurrentUser.Identity.Name);
    }

    async Task btnNewClick()
    {
        var parameters = new ModalParameters();
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var noticeEdit = Modal.Show<NoticeEdit>("공지사항등록 및 수정", parameters);
        var result = await noticeEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }

    async Task btnUpdateClick(NoticeModel noticeCd)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(NoticeEdit.selectedNoticeCd), noticeCd);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var noticeEdit = Modal.Show<NoticeEdit>("공지사항등록 및 수정", parameters);
        var result = await noticeEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }

    }

    void btnDeleteClick(NoticeModel noticeCd)
    {
        DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

        selectedNoticeCd = noticeCd;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            //await _db.DeleteData(selectedNoticeCd, CurrentUser.Identity.Name);
            await GetAllDatas();
        }
        else
        {
            selectedNoticeCd = null;
        }
    }

}
