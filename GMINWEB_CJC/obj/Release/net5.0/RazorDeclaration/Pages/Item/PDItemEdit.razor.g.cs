// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace GMINWEB_Rebuild.Pages.Item
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using GMINWEB_Rebuild;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using GMINWEB_Rebuild.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using BlazorFileUploader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\_Imports.razor"
using System.Resources.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
using GMINWEB_Rebuild.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
using DataAccessLibrary.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
using DataAccessLibrary.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/pdItemEdit")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/pdItemEdit/{loginId}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/pdItemEdit/{loginId}/{itemCd}/{storeBizUnit}/{factBizUnit}")]
    public partial class PDItemEdit : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 772 "C:\Rebuild_CJC\CJC\GMINWEB_CJC\Pages\Item\PDItemEdit.razor"
       
    [Parameter] public string itemCd { get; set; }
    [Parameter] public string storeBizUnit { get; set; }
    [Parameter] public string factBizUnit { get; set; }
    [Parameter] public string loginId { get; set; }

    public GMINWEB_Rebuild.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    //기타아이템모델추가
    private EtcItemModel etcItemModel = new EtcItemModel();

    private HandMdItemModel handMdItemModel = new HandMdItemModel();
    private ItemModel itemModel = new ItemModel();
    private PDItemImgModel itemImgModel = new PDItemImgModel();
    private MachineMdItemModel machineMdItemMaster = new MachineMdItemModel();
    private MachineMdItemModel machineMdItemDetail = new MachineMdItemModel();
    private List<MachineMdItemModel> machineMdItemModels;

    RadzenDataGrid<MachineMdItemModel> detailGrid;

    private MachineMdItemModel machineToInsert;
    private MachineMdItemModel machineItemToDelete { get; set; }
    IEnumerable<int> values = new int[] { };

    //코드헬프
    List<BizUnitModel> factBizUnitList;
    List<CommonCodeModel> itemClsList;
    List<CommonCodeModel> item1ClsList;
    List<CommonCodeModel> item2ClsList;
    List<CommonCodeModel> item3ClsList;
    List<CommonCodeModel> modelTypeList;
    List<CommonCodeModel> attachTypeList;
    List<CommonCodeModel> hairDirectioneList;
    List<CommonCodeModel> hairColorList;
    List<CommonCodeModel> frontKnottingList;
    List<CommonCodeModel> baseNetList;
    List<CommonCodeModel> frontList;
    List<CommonCodeModel> nanoSkinThinList;
    List<CommonCodeModel> nanoSkinCoatingList;
    List<CommonCodeModel> skinColorList;
    List<CommonCodeModel> partCrownList;
    List<CommonCodeModel> madeTypeList;
    List<int> ACchk;

    bool isDisable;
    DateTime manufactedDt;      //머신메이드-제조일자
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (itemCd is not null)
        {
            //신규등록이 아닐경우 특정 컬럼 수정 불가
            isDisabled = true;

            var itemList = await _itemManager.GetPDItem(loginId, storeBizUnit, factBizUnit, itemCd);
            itemModel = itemList.FirstOrDefault();

            //var pdItemImgList = await _itemManager.GetPDItemImg(loginId, itemModel);
            //if (pdItemImgList.Count > 0)
            //{
            //    itemImgModel = pdItemImgList.FirstOrDefault();
            //}


            //핸드메이드일 경우
            if (itemModel.MadeType == 1)
            {
                var handMdItemList = await _itemManager.GetHandMdItem(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                handMdItemModel = handMdItemList.FirstOrDefault();
                //
                string[] xx = handMdItemModel.AttachTypex.Split(",");
                int[] ints = Array.ConvertAll(xx, s => int.Parse(s));
                values = ints;
            }
            //머신메이드일 경우
            else if (itemModel.MadeType == 2)
            {
                //머신메이드제품 마스터 조회
                var machineMdItemList = await _itemManager.GetMachineMdItemMaster(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                machineMdItemMaster = machineMdItemList.FirstOrDefault();

                if (machineMdItemMaster.ManufactedDt.GetNullToEmpty() != string.Empty)
                {
                    manufactedDt = Convert.ToDateTime(machineMdItemMaster.ManufactedDt);
                }

                //머신메이드제품 상세내역 조회
                machineMdItemModels = await _itemManager.GetMachineMdItemDetail(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                machineMdItemDetail = machineMdItemModels.FirstOrDefault();
            }
            //기타제품일때
            else if (itemModel.MadeType == 3)
            {

                var etcItemList = await _itemManager.GetEtcItem(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                etcItemModel = etcItemList.FirstOrDefault();
            }
        }
        else
        {
            //신규등록일 경우 모든 컬럼 활성화
            isDisabled = false;

            itemModel.MadeType = 1;

            //제조일자 세팅
            manufactedDt = DateTime.Today;
            machineMdItemMaster.ManufactedDt = manufactedDt.ToString("yyyy-MM-dd");
            handMdItemModel.AttachTypeCheck = new int[] { 1 }; //
        }

        factBizUnitList = await _bizUnitManager.GetFactoryBizUnit(loginId);
        itemClsList = await _codeManager.FindCommonCodeFromName("품목구분", loginId);
        item1ClsList = await _codeManager.FindCommonCodeFromName("품목대분류", loginId);
        item2ClsList = await _codeManager.FindCommonCodeFromName("품목중분류", loginId);
        item3ClsList = await _codeManager.FindCommonCodeFromName("품목소분류", loginId);
        modelTypeList = await _codeManager.FindCommonCodeFromName("종류", loginId);
        attachTypeList = await _codeManager.FindCommonCodeFromName("부착방식", loginId);
        hairDirectioneList = await _codeManager.FindCommonCodeFromName("모방향", loginId);
        frontKnottingList = await _codeManager.FindCommonCodeFromName("앞라인넛팅", loginId);
        baseNetList = await _codeManager.FindCommonCodeFromName("망", loginId);
        frontList = await _codeManager.FindCommonCodeFromName("앞", loginId);
        nanoSkinThinList = await _codeManager.FindCommonCodeFromName("나노스킨두께", loginId);
        nanoSkinCoatingList = await _codeManager.FindCommonCodeFromName("나노스킨코팅", loginId);
        skinColorList = await _codeManager.FindCommonCodeFromName("스킨색상", loginId);
        partCrownList = await _codeManager.FindCommonCodeFromName("가르마,크라운", loginId);
        madeTypeList = await _codeManager.FindCommonCodeFromName("제작형태", loginId);
        hairColorList = await _codeManager.FindCommonCodeFromName("모발색상", loginId);

        //품목구분 제품으로 고정
        itemModel.ItemCls = 1;

    }

    void btnCancleClick()
    {
        navigationManager.NavigateTo("/PDItemManagement");
    }

    async Task btnSaveClick()
    {
        var errMessage = ValidationPDItem(itemModel);
        //필수값 체크
        if (errMessage == string.Empty)
        {
            //신규일때
            if (itemModel.ItemCd.GetNullToEmpty() == string.Empty)
            {
                itemModel.MadeYN = "N";

                if (itemModel.MadeType == 1)
                {
                    var result = await _itemManager.InsertHandMdItemData(loginId, itemModel, handMdItemModel);

                    if (result.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                    }
                    else
                    {
                        var itemCd = result.FirstOrDefault().RTN_KEY;
                        var bizUnit = result.FirstOrDefault().RTN_KEY2;
                        //handMdItemModel.AttachTypeCheck = new int[] { 1 };
                        itemModel.ItemCd = itemCd;
                        itemModel.BizUnit = bizUnit;

                        //제품 이미지 저장
                        //await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }
                }
                else if (itemModel.MadeType == 2)
                {
                    var result = await _itemManager.InsertMachineMdItemData(loginId, itemModel, machineMdItemMaster);

                    if (result.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                    }
                    else
                    {
                        var itemCd = result.FirstOrDefault().RTN_KEY;
                        itemModel.ItemCd = itemCd;

                        ////제품 이미지 저장
                        //await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }
                }
                //기타일때
                else if (itemModel.MadeType == 3)
                {
                    var result = await _itemManager.InsertEtcItemData(loginId, itemModel, etcItemModel);

                    if (result.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                    }
                    else
                    {
                        var itemCd = result.FirstOrDefault().RTN_KEY;
                        var bizUnit = result.FirstOrDefault().RTN_KEY2;

                        itemModel.ItemCd = itemCd;
                        itemModel.BizUnit = bizUnit;

                        //제품 이미지 저장
                        //await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }

                }

            }
            //수정일때
            else
            {
                //핸드메이드 수정일 때
                if (itemModel.MadeType == 1)
                {
                    var res = await _itemManager.UpdateHandMdItemData(loginId, itemModel, handMdItemModel);

                    if (res.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
                    }
                    else
                    {
                        //if (itemImgModel.Seq.GetIntNullToZero() == 0)
                        //{
                        //    //이미지 등록
                        //    await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);
                        //}
                        //else
                        //{
                        //    //이미지 수정
                        //    await _itemManager.UpdatePDItemImgData(loginId, itemImgModel);
                        //}

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }
                }
                //머신메이드 수정일 때
                else if (itemModel.MadeType == 2)
                {
                    var res = await _itemManager.UpdateMachineMdItemData(loginId, itemModel, machineMdItemMaster);

                    if (res.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
                    }
                    else
                    {
                        //if (itemImgModel.Seq.GetIntNullToZero() == 0)
                        //{
                        //    //이미지 등록
                        //    await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);
                        //}
                        //else
                        //{
                        //    //이미지 수정
                        //    await _itemManager.UpdatePDItemImgData(loginId, itemImgModel);
                        //}

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }
                }
                //기타수정일때(여기를 이제 수정해야할 차례입니다.))
                else if (itemModel.MadeType == 3)
                {
                    var res = await _itemManager.UpdateEtcItemData(loginId, itemModel, etcItemModel);

                    if (res.IsError())
                    {
                        await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
                    }
                    else
                    {
                        //if (itemImgModel.Seq.GetIntNullToZero() == 0)
                        //{
                        //    //이미지 등록
                        //    await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);
                        //}
                        //else
                        //{
                        //    //이미지 수정
                        //    await _itemManager.UpdatePDItemImgData(loginId, itemImgModel);
                        //}

                        await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                        navigationManager.NavigateTo("/PDItemManagement");
                    }
                }
            }
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", errMessage);
        }

    }

    void ManufactedDtChanged(DateTime? value)
    {
        if (value is not null)
        {
            machineMdItemMaster.ManufactedDt = ((DateTime)value).ToString("yyyy-MM-dd");
        }
    }


    string ValidationPDItem(ItemModel item)
    {
        ////필수값 미입력시 에러메세지 발행

        if (item.ItemNm.GetNullToEmpty() == string.Empty)
        {
            return "품목명을 입력하여 주십시오";
        }
        if (item.Item1Cls.GetNullToEmpty() == string.Empty)
        {
            return "대분류명을 입력하여 주십시오";
        }
        if (item.Item2Cls.GetNullToEmpty() == string.Empty)
        {
            return "중분류명을 입력하여 주십시오";
        }
        if (item.Item3Cls.GetNullToEmpty() == string.Empty)
        {
            return "소분류명을 입력하여 주십시오";
        }

        return string.Empty;
    }

    void OnChangeAttachTypeCheck(IEnumerable<int> value)
    {
        if (value is not null)
        {
            handMdItemModel.AttachTypex = "";
            List<int> AC = value.ToList();
            int cnt = AC.Count();
            int i = 0;
            foreach (int val in AC)
            {
                if (i != cnt - 1)
                {
                    handMdItemModel.AttachTypex = handMdItemModel.AttachTypex + val.ToString() + ",";
                }
                else
                {
                    handMdItemModel.AttachTypex = handMdItemModel.AttachTypex + val.ToString();
                }

                i += 1;
            }
        }
    }

    bool ValidationCheckItem(ItemModel item)
    {
        if (item.ItemNm.GetNullToEmpty() == string.Empty) return false;
        if (item.MadeType.GetIntNullToZero() == 0) return false;
        if (item.Item1Cls.GetIntNullToZero() == 0) return false;
        if (item.Item2Cls.GetIntNullToZero() == 0) return false;
        if (item.Item3Cls.GetIntNullToZero() == 0) return false;
        if (item.FactBizUnit.GetNullToEmpty() == string.Empty) return false;

        return true;

    }

    bool ValidationCheckMachineMdItemDetail(MachineMdItemModel machineMdItem)
    {
        if (machineMdItem.Size.GetIntNullToZero() == 0) return false;

        return true;
    }

    #region // ** 머신메이드 제품 상세 그리드 컨트롤 ** //
    async Task InsertRow()
    {
        //마스터 저장 후
        if (machineMdItemMaster.ItemCd.GetNullToEmpty() != string.Empty)
        {
            //PK 세팅
            machineToInsert = new MachineMdItemModel();
            machineToInsert.ItemCd = machineMdItemMaster.ItemCd;
            machineToInsert.BizUnit = machineMdItemMaster.BizUnit;
            machineToInsert.FactBizUnit = machineMdItemMaster.FactBizUnit;

            await detailGrid.InsertRow(machineToInsert);
        }
        //마스터 저장 전이라면 마스터 먼저 저장
        else
        {
            //필수코드 점검
            if (ValidationCheckItem(itemModel) == false)
            {
                await jsRuntime.InvokeVoidAsync("alert", "빨간색으로 표시된 필수코드들을 모두 입력하여 주십시오.");
                return;
            }

            //제품과 머신메이드 상세내역 저장
            itemModel.MadeYN = "N";
            var result = await _itemManager.InsertMachineMdItemData(loginId, itemModel, machineMdItemMaster);

            if (!result.IsError())
            {
                var itemCd = result.FirstOrDefault().RTN_KEY;
                var bizUnit = result.FirstOrDefault().RTN_KEY2;

                itemModel.ItemCd = itemCd;
                itemModel.BizUnit = bizUnit;

                //제품 이미지 저장
                //await _itemManager.InsertPDItemImgData(loginId, itemModel, itemImgModel);

                //제품조회
                var itemList = await _itemManager.GetPDItem(loginId, bizUnit, itemModel.FactBizUnit, itemCd);
                itemModel = itemList.FirstOrDefault();

                //머신메이드제품 마스터 조회
                var machineMdItemList = await _itemManager.GetMachineMdItemMaster(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                machineMdItemMaster = machineMdItemList.FirstOrDefault();

                //머신메이드제품 상세내역 조회
                machineMdItemModels = await _itemManager.GetMachineMdItemDetail(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
                machineMdItemDetail = machineMdItemModels.FirstOrDefault();

                //제품 이미지 조회
                //var imgList = await _itemManager.GetPDItemImg(loginId, itemModel);
                //itemImgModel = imgList.FirstOrDefault();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
            }


        }

    }

    async Task EditRow(MachineMdItemModel machineMdItemDetail)
    {
        machineToInsert = machineMdItemDetail;

        await detailGrid.EditRow(machineMdItemDetail);
    }

    async Task SaveRow(MachineMdItemModel machineMdItemDetail)
    {
        if (machineMdItemDetail == machineToInsert)
        {
            machineToInsert = null;
        }

        if (ValidationCheckMachineMdItemDetail(machineMdItemDetail) == true)
        {
            if (machineMdItemDetail.Seq == 0)
            {
                //코드가 채번되기 전이면 INSERT
                await _itemManager.InsertMachineMdItemDetailData(loginId, machineMdItemDetail);
            }
            else
            {
                //파일넘버가 기존에 존재하면 UPDATE
                await _itemManager.UpdateMachineMdItemDetailData(loginId, machineMdItemDetail);
            }
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "코드명을 입력하여 주십시오");
        }

        await detailGrid.UpdateRow(machineMdItemDetail);

        machineMdItemModels = await _itemManager.GetMachineMdItemDetail(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
    }

    void CancelEdit(MachineMdItemModel machineMdItemDetail)
    {
        if (machineMdItemDetail == machineToInsert)
        {
            machineToInsert = null;
        }

        detailGrid.CancelEditRow(machineMdItemDetail);
    }

    async Task DeleteRow(MachineMdItemModel machineMdItemDetail)
    {
        if (machineMdItemDetail == machineToInsert)
        {
            machineToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE
        if (machineMdItemModels.Contains(machineMdItemDetail))
        {
            machineItemToDelete = machineMdItemDetail;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            detailGrid.CancelEditRow(machineMdItemDetail);
            await detailGrid.Reload();
        }
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            //삭제
            var result = await _itemManager.DeleteMachineMdItemDetail(loginId, machineItemToDelete);

            //그리드 재조회
            machineMdItemModels = await _itemManager.GetMachineMdItemDetail(loginId, itemModel.BizUnit, itemModel.FactBizUnit, itemModel.ItemCd);
            await detailGrid.Reload();
        }
        else
        {
            machineItemToDelete = null;
        }
    }
    #endregion




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICommonCodeData _codeManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IItemData _itemManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBizUnitData _bizUnitManager { get; set; }
    }
}
#pragma warning restore 1591
