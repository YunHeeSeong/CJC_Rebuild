// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace GMINWEB_CJC.Pages.Purchase
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using GMINWEB_CJC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using GMINWEB_CJC.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using BlazorFileUploader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\_Imports.razor"
using System.Resources.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\Pages\Purchase\FactInventoryCheck.razor"
using DataAccessLibrary.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\Pages\Purchase\FactInventoryCheck.razor"
using DataAccessLibrary.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\Pages\Purchase\FactInventoryCheck.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\Pages\Purchase\FactInventoryCheck.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/FactInventoryCheck")]
    public partial class FactInventoryCheck : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 250 "D:\작업장\Desktop\개발 솔루션\cjc관련 파일\CJC\GMINWEB_CJC\Pages\Purchase\FactInventoryCheck.razor"
       
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 33; //매장별 재고실사

    ClaimsPrincipal CurrentUser;
    private List<InventoryModel> pditemModels;
    private List<InventoryModel> itemModels;

    private List<InventoryCheckModel> selectedItemModels = new List<InventoryCheckModel>();
    private List<InventoryCheckModel> selectedPDItemModels = new List<InventoryCheckModel>();

    private List<UserModel> CheckStkUserIdList;

    private InventoryCheckModel inventortyCheckToDelete;
    private InventoryCheckModel inventortyCheckToInsert;

    private string RoleYN;
    private string selectedBizUnit;
    private string selectedFactBizUnit;
    private string selectedItemCd;
    private string loginId;
    private DateTime PDItemCheckStkDate;
    private DateTime ItemCheckStkDate;
    private bool isDisable;

    RadzenDataGrid<InventoryCheckModel> pdItemGrid;
    RadzenDataGrid<InventoryCheckModel> itemGrid;


    protected override async Task OnInitializedAsync()
    {
        //로그인을 한 사용자인지
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            //사용자 정보가 있는지
            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                loginId = CurrentUser.Identity.Name;

                //조회권한이 있는지
                if (RoleYN == "Y")
                {
                    //제품 재고 조회
                    pditemModels = await _invenManaget.GetFactPDItemInventory(loginId);

                    //품목 재고 조회
                    itemModels = await _invenManaget.GetFactItemInventory(loginId);
                }

                CheckStkUserIdList = await _userManager.GetUserFromCodehelp(loginId);

            }
        }
    }

    //상단 그리드 로우 선택시 하단 출하내역 조회하는 이벤트
    public async Task ItemRowSelect(InventoryModel InvenCheck)
    {
        inventortyCheckToInsert = null;
        selectedFactBizUnit = null;
        selectedBizUnit = InvenCheck.BizUnit;
        selectedItemCd = InvenCheck.ItemCd;

        selectedItemModels = await _checkManager.GetFactItemCheckData(loginId, InvenCheck);
    }

    public async Task PDItemRowSelect(InventoryModel InvenCheck)
    {
        inventortyCheckToInsert = null;

        selectedBizUnit = InvenCheck.BizUnit;
        selectedFactBizUnit = InvenCheck.FactBizUnit;
        selectedItemCd = InvenCheck.ItemCd;

        selectedPDItemModels = await _checkManager.GetFactPDItemCheckData(loginId, InvenCheck);
    }

    //출하내역 삭제 버튼 이벤트
    void btnDeleteItemClick(InventoryCheckModel InvenCheck)
    {
        DeleteConfirmation.Show("정말 실사 내역을 삭제하시겠습니까 ?");

        inventortyCheckToDelete = InvenCheck;
    }

    async Task PDItemInsertRow()
    {
        if (selectedBizUnit is null && selectedFactBizUnit is null)
        {
            await jsRuntime.InvokeVoidAsync("alert", "실사 재고할 제품을 먼저 선택하여 주십시오.");
        }
        else
        {
            PDItemCheckStkDate = new DateTime();

            inventortyCheckToInsert = new InventoryCheckModel();
            inventortyCheckToInsert.BizUnit = selectedBizUnit;
            inventortyCheckToInsert.FactBizUnit = selectedFactBizUnit;
            inventortyCheckToInsert.Whcd = selectedBizUnit;
            inventortyCheckToInsert.ItemCd = selectedItemCd;

            await pdItemGrid.InsertRow(inventortyCheckToInsert);
        }
    }

    async Task ItemInsertRow()
    {
        if (selectedBizUnit is null)
        {
            await jsRuntime.InvokeVoidAsync("alert", "실사 재고할 품목을 먼저 선택하여 주십시오.");
        }
        else
        {
            ItemCheckStkDate = new DateTime();

            inventortyCheckToInsert = new InventoryCheckModel();
            inventortyCheckToInsert.BizUnit = selectedBizUnit;
            inventortyCheckToInsert.ItemCd = selectedItemCd;

            await itemGrid.InsertRow(inventortyCheckToInsert);
        }
    }

    async Task PDItemSaveRow(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck == inventortyCheckToInsert)
        {
            inventortyCheckToInsert = null;
        }

        //필수코드 체크
        var errMessage = ValidationCheckDetail(InvenCheck);

        if (errMessage == string.Empty)
        {
            //순번이 채번되기 전이면 INSERT
            if (InvenCheck.CheckSeq == 0)
            {
                var res = await _checkManager.FactPDItemInsertData(loginId, InvenCheck);

                if (res.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
                }
                else
                {
                    await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                }
            }

            //재조회
            await pdItemGrid.UpdateRow(InvenCheck);
            pditemModels = await _invenManaget.GetFactPDItemInventory(loginId);
            selectedPDItemModels = null;

        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", errMessage);
        }
    }

    async Task ItemSaveRow(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck == inventortyCheckToInsert)
        {
            inventortyCheckToInsert = null;
        }

        //필수코드 체크
        var errMessage = ValidationCheckDetail(InvenCheck);

        if (errMessage == string.Empty)
        {
            //순번이 채번되기 전이면 INSERT
            if (InvenCheck.CheckSeq == 0)
            {
                var res = await _checkManager.FactItemInsertData(loginId, InvenCheck);

                if (res.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", res.GetErrorMessages());
                }
                else
                {
                    await jsRuntime.InvokeVoidAsync("alert", "처리되었습니다.");
                }
            }

            //재조회
            await itemGrid.UpdateRow(InvenCheck);
            itemModels = await _invenManaget.GetFactItemInventory(loginId);
            selectedItemModels = null;

        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", errMessage);
        }
    }

    string ValidationCheckDetail(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck.CheckStkUserId.GetIntNullToZero() == 0)
        {
            return "실사 담당자를 선택하여 주세요.";
        }
        if (InvenCheck.CheckStkDate.GetNullToEmpty() == string.Empty)
        {
            return "실사 일자를 선택하여 주세요.";
        }
        return string.Empty;
    }

    void CancelEdit(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck == inventortyCheckToInsert)
        {
            inventortyCheckToInsert = null;
        }

        if (InvenCheck.FactBizUnit is not null)
        {
            pdItemGrid.CancelEditRow(InvenCheck);
        }
        else
        {
            itemGrid.CancelEditRow(InvenCheck);
        }
    }

    async Task PDItemDeleteRow(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck == inventortyCheckToInsert)
        {
            inventortyCheckToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE
        if (selectedPDItemModels.Contains(InvenCheck))
        {
            inventortyCheckToDelete = InvenCheck;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            pdItemGrid.CancelEditRow(InvenCheck);
            await pdItemGrid.Reload();
        }
    }

    async Task ItemDeleteRow(InventoryCheckModel InvenCheck)
    {
        if (InvenCheck == inventortyCheckToInsert)
        {
            inventortyCheckToInsert = null;
        }

        //저장 후 삭제일 때 DB 에서 DELETE
        if (selectedItemModels.Contains(InvenCheck))
        {
            inventortyCheckToDelete = InvenCheck;
            DeleteConfirmation.Show("삭제하시겠습니까?");
        }
        //저장 전 삭제일 때 GRID UI에서만 삭제
        else
        {
            itemGrid.CancelEditRow(InvenCheck);
            await itemGrid.Reload();
        }
    }

    //삭제 확인 팝업
    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            if (selectedFactBizUnit is not null)
            {
                var result = await _checkManager.FactPDItemDeleteData(loginId, inventortyCheckToDelete);
                if (result.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                }
                else
                {
                    await GetAllDatas();
                }
            }
            else
            {
                var result = await _checkManager.FactItemDeleteData(loginId, inventortyCheckToDelete);
                if (result.IsError())
                {
                    await jsRuntime.InvokeVoidAsync("alert", result.GetErrorMessages());
                }
                else
                {
                    await GetAllDatas();
                }
            }

        }
        else
        {
            inventortyCheckToDelete = null;
        }
    }

    void PDItemCheckStkDateChanged(object value)
    {
        if (value is not null)
        {
            inventortyCheckToInsert.CheckStkDate = Convert.ToDateTime(value).ToString("yyyy-MM-dd");
        }
    }

    void ItemCheckStkDateChanged(object value)
    {
        if (value is not null)
        {
            inventortyCheckToInsert.CheckStkDate = Convert.ToDateTime(value).ToString("yyyy-MM-dd");
        }
    }

    void OnChangeCheckStkUserId(object value)
    {
        if (value is not null && inventortyCheckToInsert is not null)
        {
            inventortyCheckToInsert.CheckStkUserId = ((UserModel)value).UserCd;
            inventortyCheckToInsert.CheckStkUserIdNm = ((UserModel)value).UserNm;
            inventortyCheckToInsert.CheckStkGroupCd = ((UserModel)value).GroupCd;
            inventortyCheckToInsert.CheckStkGroupCdNm = ((UserModel)value).GroupNm;

        }
    }

    void OnChangePrice(object value)
    {
        if (value is not null && inventortyCheckToInsert is not null)
        {
            var price = Convert.ToDecimal(value);

            inventortyCheckToInsert.CheckStkAmt = price * inventortyCheckToInsert.CheckStkQty;
        }
    }

    void OnChangeCheckStkQty(object value)
    {
        if (value is not null && inventortyCheckToInsert is not null)
        {
            var StkQty = Convert.ToDecimal(value);

            inventortyCheckToInsert.CheckStkAmt = StkQty * inventortyCheckToInsert.Price;
        }
    }

    //재조회
    private async Task GetAllDatas()
    {
        pditemModels = await _invenManaget.GetFactPDItemInventory(loginId);
        itemModels = await _invenManaget.GetFactItemInventory(loginId);

        selectedPDItemModels = null;
        selectedItemModels = null;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserData _userManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRoleData _RoleManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventoryCheckData _checkManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventoryData _invenManaget { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBizUnitData _bizUnitManager { get; set; }
    }
}
#pragma warning restore 1591
