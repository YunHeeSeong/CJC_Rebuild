@page "/ReadGroup"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic
@using System.Security.Claims

@inject IGroupData _db
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime

<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 기준정보관리 >
    <strong>조직조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">조직 조회</h1>
            </div>

            <div style="margin-bottom:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="조직리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@group" TItem="GroupModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 조직(부서)이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="GroupModel" Property="GroupCd" Title="부서코드" Width="80px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="GroupModel" Property="GroupNm" Title="부서명" Width="900px" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>

        </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public GroupModel selectedGroup { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 10;

    ClaimsPrincipal CurrentUser;

    private List<GroupModel> group;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    group = await _db.GetGroup(CurrentUser.Identity.Name);
                }
            }

        }
    }

    private async Task GetAllDatas()
    {
        group = await _db.GetGroup(CurrentUser.Identity.Name);
    }

    async Task btnNewClick()
    {
        var parameters = new ModalParameters();
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var groupEdit = Modal.Show<GroupEdit>("조직 등록", parameters);
        var result = await groupEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }

    async Task btnUpdateClick(GroupModel group)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(GroupEdit.selectedGroup), group);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var groupEdit = Modal.Show<GroupEdit>("조직등록 및 수정", parameters);
        var result = await groupEdit.Result;

        if (!result.Cancelled)
        {
            //show
            await GetAllDatas();
        }
    }


    void btnDeleteClick(GroupModel group)
    {
        DeleteConfirmation.Show("삭제시 등록된 조직의 관련 파일도 삭제됩니다. 정말 삭제하시겠습니까 ?");

        selectedGroup = group;
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await _db.DeleteData(selectedGroup, CurrentUser.Identity.Name);
            await GetAllDatas();
        }
        else
        {
            selectedGroup = null;
        }
    }
}
