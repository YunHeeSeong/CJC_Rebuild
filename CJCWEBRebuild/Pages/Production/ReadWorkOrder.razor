@page "/ReadWorkOrder"

@using DataAccessLibrary.Model
@using DataAccessLibrary.Data
@using System.Collections.Generic
@using System.Security.Claims
@using GMINWEB_CJC.Pages.Dialog 

@inject IWorkOrderData _db
@inject IItemData _itemManager 
@inject IRoleData _RoleManager
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    <RadzenLabel Text=" > 생산관리 > " />
    <strong>작업지시조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">작업지시 조회</h1>
                @*<div class="post_btn">
                <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">신규</RadzenButton>
            </div>*@

            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="작업지시 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@workOrderModels" TItem="WorkOrderModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="FactBizUnitNm" Title="사업장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="BizUnitNm" Title="매장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="WorkOrderNo" Title="작업지시번호" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="WorkOrderDt" Title="지시일자" Width="150px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="OrderNo" Title="주문번호" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="WorkPlanNo" Title="생산계획번호" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="ItemCd" Title="품목코드" Width="130px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="ItemNm" Title="품목명" Width="200px" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="Qty" Title="수량" Width="80px" CssClass="data_center" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="ProdDueDt" Title="생산완료예정일" Width="150px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Property="ShipDt" Title="선적일" Width="150px" CssClass="data_center" />
                                    @*<RadzenDataGridColumn TItem="WorkOrderModel" Property="WorkStateNm" Title="작업상태" Width="120px" />*@
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Filterable="false" Title="이미지 조회" Width="170px" CssClass="data_center">
                                        <Template Context="workOrderModel">
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkorange; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px;" Click="()=>btnImageUpload(workOrderModel)">이미지 조회</RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WorkOrderModel" Filterable="false" Title="상세조회" Width="300px" CssClass="data_center">
                                        <Template Context="workOrderModel">
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkblue; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px; " Click="()=>btnUpdateClick(workOrderModel)">상세조회</RadzenButton>
                                            <RadzenButton Style="margin: 0 0.5rem 0 0; color: darkorange; font-weight: bold; background-color: transparent; font-size: 20px; padding-left: 15px; padding-right: 15px; " Click="()=>btnShowReportClick(workOrderModel)">작업지시서 출력</RadzenButton>
                                            @*<RadzenButton Style="margin: 0 1rem 1rem 0; background-color: #375E99;" Click="()=>btnDeleteClick(workOrderModel)">삭제</RadzenButton>*@
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>
            @*<GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@


        </div>
        }
        else
        {
            <p>조회 권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public WorkOrderModel selectedWorkOrder { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }
    public int MenuId = 19;

    ClaimsPrincipal CurrentUser;
    private List<WorkOrderModel> workOrderModels;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _RoleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    workOrderModels = await _db.GetAllWorkOrder(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        workOrderModels = await _db.GetAllWorkOrder(CurrentUser.Identity.Name);
    }

    void btnNewClick()
    {
        navigationManager.NavigateTo("/workOrderEdit" + "/" + CurrentUser.Identity.Name);
    }

    async Task btnImageUpload(WorkOrderModel workOrder)
    {
        ItemModel itemModel = new ItemModel();
        itemModel.BizUnit = workOrder.BizUnit;
        itemModel.FactBizUnit = workOrder.FactBizUnit;
        itemModel.BizUnitNm = workOrder.BizUnitNm;
        itemModel.FactBizUnitNm = workOrder.FactBizUnitNm;
        itemModel.ItemCd = workOrder.ItemCd;
        itemModel.ItemNm = workOrder.ItemNm;

        var parameters = new ModalParameters();
        parameters.Add(nameof(ReadPDItemImgEdit.selectedPDItem), itemModel);
        parameters.Add("loginId", CurrentUser.Identity.Name);

        var groupEdit = Modal.Show<ReadPDItemImgEdit>("제품 이미지 조회", parameters);
        var result = await groupEdit.Result;

        if (!result.Cancelled)
        {
            await GetAllDatas();
        }
    }


    void btnUpdateClick(WorkOrderModel workOrderModel)
    {

        navigationManager.NavigateTo("/workOrderEdit" + "/" + CurrentUser.Identity.Name + "/" + workOrderModel.WorkOrderNo + "/" + workOrderModel.BizUnit + "/" + workOrderModel.FactBizUnit);
    }

    //레포트 출력 버튼 이벤트
    async Task btnShowReportClick(WorkOrderModel workOrder)
    {

        var itemlist = await _itemManager.GetPDItem(CurrentUser.Identity.Name, workOrder.BizUnit, workOrder.FactBizUnit, workOrder.ItemCd);
        var madeType = itemlist.FirstOrDefault().MadeType;
        var url = string.Empty;

        //머신메이드 품목 작업지시서 일 때 
        if (madeType == 2)
        {
            url = string.Format("WorkorderM?BizUnit={0}&FactBizUnit={1}&WorkOrderNo={2}&ItemCd={3}", workOrder.BizUnit, workOrder.FactBizUnit, workOrder.WorkOrderNo, workOrder.ItemCd);
        }
        //핸드메이드 품목 작업지시서 일 때 
        else
        {
            url = string.Format("WorkorderH?BizUnit={0}&FactBizUnit={1}&WorkOrderNo={2}", workOrder.BizUnit, workOrder.FactBizUnit, workOrder.WorkOrderNo);
        }

        var parameter = new ModalParameters();

        DocumentViewer dv = new DocumentViewer();

        parameter.Add(nameof(dv.ReportUrl), url);

        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeIn(1)
,
            Position = ModalPosition.Center
        };

        var documentviewer = Modal.Show<DocumentViewer>("View Report", parameter, options);
        var result = await documentviewer.Result;
    }

}
