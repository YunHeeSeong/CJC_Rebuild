@page "/ReadBom"
@using System.Security.Claims
@using DataAccessLibrary.Data;
@using DataAccessLibrary.Model;

@inject IItemData _itemManager
@inject IRoleData _roleManager
@inject IBOMData _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="pagelocation" id="menugnb">
    <i class="fa fa-home"></i>
    <a href="/">HOME</a>
    > 품목관리 >
    <strong>BOM조회</strong>
</div>

<br />

<AuthorizeView>
    <Authorized>
        @if (RoleYN == "Y")
        {
        <div>
            <div class="info_title">
                <h1 class="sub_title">BOM 조회</h1>
                @*<div class="post_btn">
                <RadzenButton Click="btnNewClick" Style="background-color:black; color:white">BOM 등록</RadzenButton>
            </div>*@
            </div>

            <div style="margin-top:45px">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="품목 리스트">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="10" AllowPaging="true" AllowSorting="true" Data="@itemList" TItem="ItemModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" RowSelect="@RowSelect"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="조회된 이용이력이 없습니다.">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ItemModel" Property="BizUnitNm" Title="매장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="FactBizUnitNm" Title="공장명" Width="150px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="ItemCd" Title="품목코드" Width="120px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="ItemNm" Title="품목명" Width="200px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="MadeTypeNm" Title="제작방식" Width="120px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item1ClsNm" Title="대분류" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item2ClsNm" Title="중분류" Width="120px" />
                                    <RadzenDataGridColumn TItem="ItemModel" Property="Item3ClsNm" Title="소분류" Width="120px" />
                                    <!--<RadzenDataGridColumn TItem="ItemModel" Filterable="false" Title="" Width="230px">
                        <Template Context="item">-->
                                    @*<RadzenButton Style="margin: 0 1rem 1rem 0" ButtonStyle="ButtonStyle.Light" Click="()=>btnUpdateClick(bom)">수정</RadzenButton>*@
                                    <!--<RadzenButton Style="margin: 0 1rem 1rem 0; background-color: #375E99;" Click="()=>btnDeleteClick(item)">삭제</RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>-->
                                </Columns>
                            </RadzenDataGrid>

                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" Style="margin-top:20px"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@selectedBomCd" TItem="BOMModel" ColumnWidth="300px"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or" EmptyText="등록된 BOM 정보가 없습니다.">
                                <Columns>
                                    @*<RadzenDataGridColumn TItem="BOMModel" Property="BomCd" Title="코드" Width="50px" />*@
                                    <RadzenDataGridColumn TItem="BOMModel" Property="Seq" Title="순번" Width="80px" CssClass="data_center" />
                                    <RadzenDataGridColumn TItem="BOMModel" Property="PartCd" Title="자재코드" Width="150px"CssClass="data_center"  />
                                    <RadzenDataGridColumn TItem="BOMModel" Property="PartNm" Title="자재명" Width="200px" />
                                    <RadzenDataGridColumn TItem="BOMModel" Property="ReqQty" Title="대당소요량" Width="100px" FormatString="{0:n0}" />
                                    <RadzenDataGridColumn TItem="BOMModel" Property="Remk" Title="비고" Width="400px" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </div>

            @*<GMINWEB_CJC.Pages.Common.Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation" />*@

        </div>
        }
        else
        {
            <p>권한이 없는 사용자입니다.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>로그인 후 이용하실 수 있습니다.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    public BOMModel deleteCommonCodeModel { get; set; }
    public GMINWEB_CJC.Pages.Common.ConfirmBase DeleteConfirmation { get; set; }

    public int MenuId = 41;

    ClaimsPrincipal CurrentUser;

    private List<ItemModel> itemList;
    private List<BOMModel> bomList;
    private List<BOMModel> selectedBomCd;
    private string RoleYN;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.Name is not null)
            {
                var RoleList = await _roleManager.GetRoleYN(CurrentUser.Identity.Name, MenuId);
                RoleYN = RoleList.FirstOrDefault().ReadWrtYN;

                if (RoleYN == "Y")
                {
                    itemList = await _db.GetAllItem(CurrentUser.Identity.Name);
                    //bomList = await _db.GetAllBOM(CurrentUser.Identity.Name);
                }
            }
        }
    }

    private async Task GetAllDatas()
    {
        itemList = await _db.GetAllItem(CurrentUser.Identity.Name);
        selectedBomCd = null;
    }

    void btnNewClick()
    {
        navigationManager.NavigateTo("/bomEdit" + "/" + CurrentUser.Identity.Name);
    }

    //void btnUpdateClick(ItemModel item)
    //{
    //    navigationManager.NavigateTo("/bomEdit" + "/" + CurrentUser.Identity.Name + "/" + item);
    //}


    //void btnDeleteClick(ItemModel bom)
    //{
    //    DeleteConfirmation.Show("정말 삭제하시겠습니까 ?");

    //    //deleteCommonCodeModel = bom;
    //}

    //protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    //{
    //    if (deleteConfirmed)
    //    {
    //        await _db.DeleteMasterData(deleteCommonCodeModel, CurrentUser.Identity.Name);
    //        await GetAllDatas();
    //    }
    //    else
    //    {
    //        deleteCommonCodeModel = null;
    //    }
    //}

    public async Task RowSelect(ItemModel item)
    {
        selectedBomCd = await _db.GetBOM(item.BizUnit, item.FactBizUnit, item.ItemCd);
    }

}